; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\exe\main.o --asm_dir=.\Output\Listings\ --list_dir=.\Output\Listings\ --depend=.\output\exe\main.d --cpu=Cortex-M0+ --apcs=interwork -O1 -Otime --diag_suppress=9931 -I..\Src -I..\lib\inc -I.\RTE\_HC32L110_Demo -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM0plus\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DARMCM0P --omf_browse=.\output\exe\main.crf ..\Src\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Test PROC
;;;210    
;;;211    void Test()
000000  4cfe              LDR      r4,|L1.1020|
;;;212    {
;;;213    
;;;214    	P03_SetOutput();
000002  6820              LDR      r0,[r4,#0]
000004  2508              MOVS     r5,#8
000006  43a8              BICS     r0,r0,r5
000008  6020              STR      r0,[r4,#0]
;;;215    	L005_GPIO->P0DIR_f.P0DIR3 = 0;
00000a  6820              LDR      r0,[r4,#0]
00000c  43a8              BICS     r0,r0,r5
00000e  6020              STR      r0,[r4,#0]
;;;216    	while(1)
;;;217    	{
;;;218    	P03_SetHigh();
;;;219    	McuDelay(40000);
000010  4efb              LDR      r6,|L1.1024|
;;;220    	P03_SetLow();
;;;221    	McuDelay(200000);
000012  4ffc              LDR      r7,|L1.1028|
                  |L1.20|
000014  68a0              LDR      r0,[r4,#8]            ;218
000016  4328              ORRS     r0,r0,r5              ;218
000018  60a0              STR      r0,[r4,#8]            ;218
00001a  4630              MOV      r0,r6                 ;219
00001c  f7fffffe          BL       McuDelay
000020  68a0              LDR      r0,[r4,#8]            ;220
000022  43a8              BICS     r0,r0,r5              ;220
000024  60a0              STR      r0,[r4,#8]            ;220
000026  4638              MOV      r0,r7
000028  f7fffffe          BL       McuDelay
00002c  e7f2              B        |L1.20|
;;;222    	}
;;;223        
;;;224        
;;;225    }
;;;226    
                          ENDP

                  Run_Show PROC
;;;227    void Run_Show(uint8_t cnt)
00002e  b5f8              PUSH     {r3-r7,lr}
;;;228    {
;;;229    	while(cnt--)
000030  1e41              SUBS     r1,r0,#1
000032  b2cc              UXTB     r4,r1
000034  2800              CMP      r0,#0
000036  d013              BEQ      |L1.96|
;;;230    	{
;;;231    		P03_SetHigh();
000038  4df0              LDR      r5,|L1.1020|
;;;232    		McuDelay(40000);
00003a  4ff1              LDR      r7,|L1.1024|
00003c  2608              MOVS     r6,#8                 ;231
                  |L1.62|
00003e  68a8              LDR      r0,[r5,#8]            ;231
000040  4330              ORRS     r0,r0,r6              ;231
000042  60a8              STR      r0,[r5,#8]            ;231
000044  4638              MOV      r0,r7
000046  f7fffffe          BL       McuDelay
;;;233    		P03_SetLow();
00004a  68a8              LDR      r0,[r5,#8]
00004c  43b0              BICS     r0,r0,r6
00004e  60a8              STR      r0,[r5,#8]
;;;234    		McuDelay(200000);
000050  48ec              LDR      r0,|L1.1028|
000052  f7fffffe          BL       McuDelay
000056  4620              MOV      r0,r4                 ;229
000058  1e64              SUBS     r4,r4,#1              ;229
00005a  b2e4              UXTB     r4,r4                 ;229
00005c  2800              CMP      r0,#0                 ;229
00005e  d1ee              BNE      |L1.62|
                  |L1.96|
;;;235    	}
;;;236    }
000060  bdf8              POP      {r3-r7,pc}
;;;237    void Key_Init(void)
                          ENDP

                  Key_Init PROC
000062  49e9              LDR      r1,|L1.1032|
;;;238    {
;;;239    	L005_GPIO->P2ADS = 0X00;
000064  2200              MOVS     r2,#0
000066  60ca              STR      r2,[r1,#0xc]
;;;240    	L005_GPIO->P2DIR = 0xff;
000068  20ff              MOVS     r0,#0xff
00006a  6008              STR      r0,[r1,#0]
;;;241    	L005_GPIO->P2PU  = 0xff;
00006c  6208              STR      r0,[r1,#0x20]
;;;242    	L005_GPIO->P3ADS = 0X00;
00006e  49e7              LDR      r1,|L1.1036|
000070  60ca              STR      r2,[r1,#0xc]
;;;243    	L005_GPIO->P3DIR = 0XFF;
000072  6008              STR      r0,[r1,#0]
;;;244    	L005_GPIO->P3PU = 0XFF;
000074  6208              STR      r0,[r1,#0x20]
;;;245    }
000076  4770              BX       lr
;;;246    
                          ENDP

                  Key_Scan PROC
;;;247    
;;;248    uint8_t  Key_Scan(void)
000078  b510              PUSH     {r4,lr}
;;;249    {
;;;250    	uint8_t key_p2 = 0;
;;;251    	uint8_t key_p3 = 0;
;;;252    	Key_Init();
00007a  f7fffffe          BL       Key_Init
;;;253    	McuDelay(1000);
00007e  207d              MOVS     r0,#0x7d
000080  00c0              LSLS     r0,r0,#3
000082  f7fffffe          BL       McuDelay
;;;254    	key_p2 = ~L005_GPIO->P2IN;
000086  48e0              LDR      r0,|L1.1032|
000088  6840              LDR      r0,[r0,#4]
00008a  43c0              MVNS     r0,r0
00008c  b2c1              UXTB     r1,r0
;;;255    	key_p3 = ~L005_GPIO->P3IN;
00008e  48df              LDR      r0,|L1.1036|
000090  6840              LDR      r0,[r0,#4]
000092  43c0              MVNS     r0,r0
;;;256    	return (key_p2 >> 3) | ((key_p3 >> 1) << 5) ;
000094  08c9              LSRS     r1,r1,#3
000096  0840              LSRS     r0,r0,#1
000098  0140              LSLS     r0,r0,#5
00009a  4301              ORRS     r1,r1,r0
00009c  b2c8              UXTB     r0,r1
;;;257    }
00009e  bd10              POP      {r4,pc}
;;;258    
                          ENDP

                  DoIccTest_ActiveOrSleep_4 PROC
;;;477    // CpuMode=0 代表sleep , CpuMode=1 代表Active
;;;478    void DoIccTest_ActiveOrSleep_4( uint8_t CpuMode, uint8_t Per_switch, uint8_t nop_switch, uint32_t Other_Per)
0000a0  4684              MOV      r12,r0
;;;479    {
0000a2  4696              MOV      lr,r2
;;;480    	L005_SystemCtrl->PERI_CLKEN = PeriClkON;  			  //打开指定的CLK
0000a4  2200              MOVS     r2,#0
0000a6  4cda              LDR      r4,|L1.1040|
0000a8  43d2              MVNS     r2,r2
0000aa  6222              STR      r2,[r4,#0x20]
;;;481    	//切32768
;;;482    	L005_GPIO->P1ADS_f.P1ADS4 = 1;
0000ac  4dd9              LDR      r5,|L1.1044|
0000ae  68ee              LDR      r6,[r5,#0xc]
0000b0  2710              MOVS     r7,#0x10
0000b2  433e              ORRS     r6,r6,r7
0000b4  60ee              STR      r6,[r5,#0xc]
;;;483    	L005_GPIO->P1ADS_f.P1ADS5 = 1;
0000b6  68ee              LDR      r6,[r5,#0xc]
0000b8  2720              MOVS     r7,#0x20
0000ba  433e              ORRS     r6,r6,r7
0000bc  60ee              STR      r6,[r5,#0xc]
;;;484    	L005_SystemCtrl->XTL_CR_f.Driver = 0x0;
0000be  69a0              LDR      r0,[r4,#0x18]
0000c0  0900              LSRS     r0,r0,#4
0000c2  0100              LSLS     r0,r0,#4
0000c4  61a0              STR      r0,[r4,#0x18]
;;;485    	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
0000c6  4fd4              LDR      r7,|L1.1048|
0000c8  60a7              STR      r7,[r4,#8]
;;;486    	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
0000ca  4dd4              LDR      r5,|L1.1052|
0000cc  60a5              STR      r5,[r4,#8]
;;;487    	L005_SystemCtrl->SYSCTRL0_f.XTL_EN = 1;
0000ce  6826              LDR      r6,[r4,#0]
0000d0  2008              MOVS     r0,#8
0000d2  4306              ORRS     r6,r6,r0
0000d4  6026              STR      r6,[r4,#0]
                  |L1.214|
;;;488    	
;;;489    	while( L005_SystemCtrl->XTL_CR_f.stable == 0 );
0000d6  69a0              LDR      r0,[r4,#0x18]
0000d8  0640              LSLS     r0,r0,#25
0000da  d5fc              BPL      |L1.214|
;;;490    	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
0000dc  60a7              STR      r7,[r4,#8]
;;;491    	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
0000de  4628              MOV      r0,r5
0000e0  60a5              STR      r5,[r4,#8]
;;;492    	L005_SystemCtrl->SYSCTRL0_f.Clk_sw4_sel = 0x03;   //0=RCH , 1=XTH , 2=RCL , 3=XTL
0000e2  6825              LDR      r5,[r4,#0]
0000e4  2630              MOVS     r6,#0x30
0000e6  4335              ORRS     r5,r5,r6
0000e8  6025              STR      r5,[r4,#0]
;;;493    	
;;;494    	//关RCH
;;;495    	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
0000ea  60a7              STR      r7,[r4,#8]
;;;496    	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
0000ec  60a0              STR      r0,[r4,#8]
;;;497    	L005_SystemCtrl->SYSCTRL0_f.RCH_EN = 0;
0000ee  6820              LDR      r0,[r4,#0]
0000f0  0840              LSRS     r0,r0,#1
0000f2  0040              LSLS     r0,r0,#1
0000f4  6020              STR      r0,[r4,#0]
;;;498    
;;;499    	if(Per_switch == PERON)
0000f6  2000              MOVS     r0,#0
0000f8  2901              CMP      r1,#1
0000fa  d002              BEQ      |L1.258|
;;;500    		L005_SystemCtrl->PERI_CLKEN = PeriClkON;
;;;501    	else if(Per_switch == PEROFF)
0000fc  2900              CMP      r1,#0
0000fe  d002              BEQ      |L1.262|
000100  e002              B        |L1.264|
                  |L1.258|
000102  6222              STR      r2,[r4,#0x20]         ;500
000104  e000              B        |L1.264|
                  |L1.262|
;;;502    		L005_SystemCtrl->PERI_CLKEN = PeriClkOFF;
000106  6220              STR      r0,[r4,#0x20]
                  |L1.264|
;;;503    	
;;;504    	if( CpuMode == 0x00 )
000108  4661              MOV      r1,r12
00010a  2900              CMP      r1,#0
00010c  d105              BNE      |L1.282|
;;;505    	{
;;;506    		L005_SystemCtrl->PERI_CLKEN |= Other_Per;
00010e  6a21              LDR      r1,[r4,#0x20]
000110  4319              ORRS     r1,r1,r3
000112  6221              STR      r1,[r4,#0x20]
;;;507    		SCB_SCR = 0x00;	//sleep
000114  49c2              LDR      r1,|L1.1056|
000116  6108              STR      r0,[r1,#0x10]
;;;508    		__WFI();
000118  bf30              WFI      
                  |L1.282|
;;;509    	}
;;;510    	if(nop_switch)
00011a  4670              MOV      r0,lr
00011c  2800              CMP      r0,#0
00011e  d000              BEQ      |L1.290|
                  |L1.288|
;;;511    	{
;;;512    		while( 1 );
000120  e7fe              B        |L1.288|
                  |L1.290|
;;;513    	}
;;;514    	else
;;;515    	{
;;;516    		while(1);
000122  e7fe              B        |L1.290|
;;;517    	}
;;;518    		
;;;519    
;;;520    }
;;;521    
                          ENDP

                  WDT_init PROC
;;;648    }
;;;649    void WDT_init(void)
000124  48bf              LDR      r0,|L1.1060|
;;;650    {
;;;651    
;;;652    	WDT__CON=0X0f; // use wdt reset, overflow 50s @10k
000126  210f              MOVS     r1,#0xf
000128  6041              STR      r1,[r0,#4]
;;;653    	WDT__RST=0X01E;
00012a  211e              MOVS     r1,#0x1e
00012c  6001              STR      r1,[r0,#0]
;;;654    	WDT__RST=0X0E1;
00012e  21e1              MOVS     r1,#0xe1
000130  6001              STR      r1,[r0,#0]
;;;655    
;;;656    }
000132  4770              BX       lr
;;;657    void RTC_init(void)
                          ENDP

                  IRC32K PROC
;;;622    }
;;;623    void IRC32K(void)
000134  48b6              LDR      r0,|L1.1040|
;;;624    {
;;;625    	L005_SystemCtrl->RCL_CR_f.FSEL = RCL32K;
000136  6941              LDR      r1,[r0,#0x14]
000138  1542              ASRS     r2,r0,#21
00013a  4391              BICS     r1,r1,r2
00013c  6141              STR      r1,[r0,#0x14]
;;;626    	L005_SystemCtrl->RCL_CR_f.TRIM = RCL_32K_TRIM;
00013e  6941              LDR      r1,[r0,#0x14]
000140  0a49              LSRS     r1,r1,#9
000142  0249              LSLS     r1,r1,#9
000144  31ee              ADDS     r1,r1,#0xee
000146  6141              STR      r1,[r0,#0x14]
;;;627    	L005_SystemCtrl->RCL_CR_f.Startup = 3;
000148  6941              LDR      r1,[r0,#0x14]
00014a  2203              MOVS     r2,#3
00014c  0292              LSLS     r2,r2,#10
00014e  4311              ORRS     r1,r1,r2
000150  6141              STR      r1,[r0,#0x14]
;;;628    	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
000152  49b1              LDR      r1,|L1.1048|
000154  6081              STR      r1,[r0,#8]
;;;629    	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
000156  49b1              LDR      r1,|L1.1052|
000158  6081              STR      r1,[r0,#8]
;;;630    	L005_SystemCtrl->SYSCTRL0_f.RCL_EN = 1;
00015a  6801              LDR      r1,[r0,#0]
00015c  2204              MOVS     r2,#4
00015e  4311              ORRS     r1,r1,r2
000160  6001              STR      r1,[r0,#0]
                  |L1.354|
;;;631    	while(L005_SystemCtrl->RCL_CR_f.stable == 0);
000162  6941              LDR      r1,[r0,#0x14]
000164  04c9              LSLS     r1,r1,#19
000166  d5fc              BPL      |L1.354|
;;;632    	
;;;633    //	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
;;;634    //	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
;;;635    //	L005_SystemCtrl->SYSCTRL0_f.Clk_sw4_sel = 0x02;   //0=RCH , 1=XTH , 2=RCL , 3=XTL
;;;636    //	L005_SystemCtrl->PERI_CLKEN = PeriClkON;  		//打开指定的CLK
;;;637    //	
;;;638    //	//关RCH
;;;639    //	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
;;;640    //	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
;;;641    //	L005_SystemCtrl->SYSCTRL0_f.RCH_EN = 0;
;;;642    //	
;;;643    //	P24_SetOutput();
;;;644    //	L005_GPIO->P24_SEL = 0X03;
;;;645    //	L005_GPIO->GPIO_CTRL1_f.hclk_sel = 0X00;
;;;646    //	L005_GPIO->GPIO_CTRL1_f.hclk_en = 1;
;;;647    //	while(1);
;;;648    }
000168  4770              BX       lr
;;;649    void WDT_init(void)
                          ENDP

                  X32_init PROC
;;;611    }
;;;612    void X32_init(void)
00016a  48aa              LDR      r0,|L1.1044|
;;;613    {
;;;614       //切32768
;;;615    	L005_GPIO->P1ADS_f.P1ADS4=1;
00016c  68c1              LDR      r1,[r0,#0xc]
00016e  2210              MOVS     r2,#0x10
000170  4311              ORRS     r1,r1,r2
000172  60c1              STR      r1,[r0,#0xc]
;;;616    	L005_GPIO->P1ADS_f.P1ADS5=1;
000174  68c1              LDR      r1,[r0,#0xc]
000176  2220              MOVS     r2,#0x20
000178  4311              ORRS     r1,r1,r2
00017a  60c1              STR      r1,[r0,#0xc]
;;;617    	L005_SystemCtrl->SYSCTRL2=0x5A5A;
00017c  48a4              LDR      r0,|L1.1040|
00017e  49a6              LDR      r1,|L1.1048|
000180  6081              STR      r1,[r0,#8]
;;;618    	L005_SystemCtrl->SYSCTRL2=0xA5A5;		
000182  49a6              LDR      r1,|L1.1052|
000184  6081              STR      r1,[r0,#8]
;;;619    	L005_SystemCtrl->SYSCTRL0_f.XTL_EN = 1;
000186  6801              LDR      r1,[r0,#0]
000188  2208              MOVS     r2,#8
00018a  4311              ORRS     r1,r1,r2
00018c  6001              STR      r1,[r0,#0]
                  |L1.398|
;;;620    	while(L005_SystemCtrl->XTL_CR_f.stable==0);
00018e  6981              LDR      r1,[r0,#0x18]
000190  0649              LSLS     r1,r1,#25
000192  d5fc              BPL      |L1.398|
;;;621    
;;;622    }
000194  4770              BX       lr
;;;623    void IRC32K(void)
                          ENDP

                  RTC_init PROC
;;;656    }
;;;657    void RTC_init(void)
000196  489e              LDR      r0,|L1.1040|
;;;658    {
;;;659    	L005_SystemCtrl->SYSCTRL2=0x5A5A;
000198  499f              LDR      r1,|L1.1048|
00019a  6081              STR      r1,[r0,#8]
;;;660    	L005_SystemCtrl->SYSCTRL1=0x0188; //reset swd use io
00019c  21ff              MOVS     r1,#0xff
00019e  3189              ADDS     r1,r1,#0x89
0001a0  6041              STR      r1,[r0,#4]
;;;661    	L005_SystemCtrl->PERI_CLKEN_f.RTC = 1;
0001a2  6a01              LDR      r1,[r0,#0x20]
0001a4  01c2              LSLS     r2,r0,#7
0001a6  4311              ORRS     r1,r1,r2
0001a8  6201              STR      r1,[r0,#0x20]
;;;662    	
;;;663    	L005_RTC->SEC=0X59;	//99-12-31-23-59-59
0001aa  489f              LDR      r0,|L1.1064|
0001ac  2159              MOVS     r1,#0x59
0001ae  6081              STR      r1,[r0,#8]
;;;664    	L005_RTC->CR0_f.AMPM=1;
0001b0  6802              LDR      r2,[r0,#0]
0001b2  2308              MOVS     r3,#8
0001b4  431a              ORRS     r2,r2,r3
0001b6  6002              STR      r2,[r0,#0]
;;;665    	L005_RTC->MIN=0X59;
0001b8  60c1              STR      r1,[r0,#0xc]
;;;666    	L005_RTC->HOUR=0X23;
0001ba  2123              MOVS     r1,#0x23
0001bc  6101              STR      r1,[r0,#0x10]
;;;667    	L005_RTC->DAY=0X31;
0001be  2131              MOVS     r1,#0x31
0001c0  6181              STR      r1,[r0,#0x18]
;;;668    	L005_RTC->WEEK=0X6;
0001c2  2106              MOVS     r1,#6
0001c4  6141              STR      r1,[r0,#0x14]
;;;669    	L005_RTC->MON=0X12;
0001c6  2112              MOVS     r1,#0x12
0001c8  61c1              STR      r1,[r0,#0x1c]
;;;670    	L005_RTC->YEAR=0X99;
0001ca  2199              MOVS     r1,#0x99
0001cc  6201              STR      r1,[r0,#0x20]
;;;671    	L005_RTC->ALMMIN=0X00;
0001ce  2100              MOVS     r1,#0
0001d0  6241              STR      r1,[r0,#0x24]
;;;672    	L005_RTC->ALMHOUR=0X00;
0001d2  6281              STR      r1,[r0,#0x28]
;;;673    	L005_RTC->ALMWEEK=0X7F;
0001d4  217f              MOVS     r1,#0x7f
0001d6  62c1              STR      r1,[r0,#0x2c]
;;;674    	
;;;675    	L005_RTC->CR0_f.PRDS=1;
0001d8  6801              LDR      r1,[r0,#0]
0001da  08c9              LSRS     r1,r1,#3
0001dc  00c9              LSLS     r1,r1,#3
0001de  1c49              ADDS     r1,r1,#1
0001e0  6001              STR      r1,[r0,#0]
;;;676    	L005_RTC->CR0_f.HZ1SEL = 1;
0001e2  6801              LDR      r1,[r0,#0]
0001e4  2240              MOVS     r2,#0x40
0001e6  4311              ORRS     r1,r1,r2
0001e8  6001              STR      r1,[r0,#0]
;;;677    	L005_RTC->CR0_f.HZ1OE=1;
0001ea  6801              LDR      r1,[r0,#0]
0001ec  2220              MOVS     r2,#0x20
0001ee  4311              ORRS     r1,r1,r2
0001f0  6001              STR      r1,[r0,#0]
;;;678    	L005_RTC->CR1_f.ALMEN=1;
0001f2  6842              LDR      r2,[r0,#4]
0001f4  2180              MOVS     r1,#0x80
0001f6  430a              ORRS     r2,r2,r1
0001f8  6042              STR      r2,[r0,#4]
;;;679    	L005_RTC->CR0_f.START=1;
0001fa  6802              LDR      r2,[r0,#0]
0001fc  430a              ORRS     r2,r2,r1
0001fe  6002              STR      r2,[r0,#0]
;;;680    
;;;681    	L005_RTC->CR1_f.WAIT=1;
000200  6841              LDR      r1,[r0,#4]
000202  2201              MOVS     r2,#1
000204  4311              ORRS     r1,r1,r2
000206  6041              STR      r1,[r0,#4]
                  |L1.520|
;;;682    	while(L005_RTC->CR1_f.WAITF==0);
000208  6841              LDR      r1,[r0,#4]
00020a  0789              LSLS     r1,r1,#30
00020c  d5fc              BPL      |L1.520|
;;;683    	L005_RTC->CR1_f.WAIT=0;
00020e  6841              LDR      r1,[r0,#4]
000210  0849              LSRS     r1,r1,#1
000212  0049              LSLS     r1,r1,#1
000214  6041              STR      r1,[r0,#4]
                  |L1.534|
;;;684    	while(L005_RTC->CR1_f.WAITF==1);
000216  6841              LDR      r1,[r0,#4]
000218  0789              LSLS     r1,r1,#30
00021a  d4fc              BMI      |L1.534|
;;;685    	
;;;686    //	L005_GPIO->P32_SEL=0X07; //rtc_1hz -> P32
;;;687    //	L005_GPIO->P3DIR_f.P3DIR2 = 0;
;;;688    	
;;;689    	L005_SystemCtrl->BOOT0=0X6FF8;
00021c  4984              LDR      r1,|L1.1072|
00021e  4883              LDR      r0,|L1.1068|
000220  6048              STR      r0,[r1,#4]
;;;690    }
000222  4770              BX       lr
;;;691    
                          ENDP

                  BTIMERLP_init PROC
;;;692    void BTIMERLP_init(uint8_t TM3_togger)
000224  2201              MOVS     r2,#1
000226  4983              LDR      r1,|L1.1076|
000228  0450              LSLS     r0,r2,#17
00022a  6008              STR      r0,[r1,#0]
00022c  4982              LDR      r1,|L1.1080|
00022e  6808              LDR      r0,[r1,#0]
000230  23ff              MOVS     r3,#0xff
000232  021b              LSLS     r3,r3,#8
000234  4398              BICS     r0,r0,r3
000236  0393              LSLS     r3,r2,#14
000238  4318              ORRS     r0,r0,r3
00023a  6008              STR      r0,[r1,#0]
;;;693    {
;;;694    	NVIC_ClearPendingIRQ(IRQn_BASE_TIMER3);
;;;695    	NVIC_SetPriority(IRQn_BASE_TIMER3, 1);
;;;696    	//NVIC_EnableIRQ(IRQn_BASE_TIMER3);
;;;697    	L005_SystemCtrl->PERI_CLKEN_f.LPTIM = 1;
00023c  4874              LDR      r0,|L1.1040|
00023e  6a01              LDR      r1,[r0,#0x20]
000240  1543              ASRS     r3,r0,#21
000242  4319              ORRS     r1,r1,r3
000244  6201              STR      r1,[r0,#0x20]
;;;698    	
;;;699    	L005_LPTIM->CR_f.TCK_SEL = 0X2;//选择PCLK作为LpTimer时钟00:PCLK 10：XIL32K 11：IRC32K
000246  487d              LDR      r0,|L1.1084|
000248  6ac1              LDR      r1,[r0,#0x2c]
00024a  2330              MOVS     r3,#0x30
00024c  4399              BICS     r1,r1,r3
00024e  3120              ADDS     r1,r1,#0x20
000250  62c1              STR      r1,[r0,#0x2c]
;;;700    
;;;701    	L005_LPTIM->CR_f.IE = 1;
000252  6ac1              LDR      r1,[r0,#0x2c]
000254  1503              ASRS     r3,r0,#20
000256  4319              ORRS     r1,r1,r3
000258  62c1              STR      r1,[r0,#0x2c]
;;;702    	L005_LPTIM->CR_f.TR=0;
00025a  6ac1              LDR      r1,[r0,#0x2c]
00025c  4391              BICS     r1,r1,r2
00025e  62c1              STR      r1,[r0,#0x2c]
                  |L1.608|
;;;703    	while(L005_LPTIM->CR_f.WT_FLAG==0);
000260  6ac1              LDR      r1,[r0,#0x2c]
000262  0609              LSLS     r1,r1,#24
000264  d5fc              BPL      |L1.608|
;;;704    	L005_LPTIM->ARR=0Xe000;
000266  2107              MOVS     r1,#7
000268  0349              LSLS     r1,r1,#13
00026a  6241              STR      r1,[r0,#0x24]
;;;705    	L005_LPTIM->CNT=0Xe000;
00026c  6201              STR      r1,[r0,#0x20]
;;;706    //	L005_LPTIM->ARR=0XFF90;
;;;707    //	L005_LPTIM->CNT=0XFF90;
;;;708    	L005_LPTIM->CR_f.MD=1;
00026e  6ac1              LDR      r1,[r0,#0x2c]
000270  2302              MOVS     r3,#2
000272  4319              ORRS     r1,r1,r3
000274  62c1              STR      r1,[r0,#0x2c]
;;;709    	L005_LPTIM->CR_f.TR=1;
000276  6ac1              LDR      r1,[r0,#0x2c]
000278  4311              ORRS     r1,r1,r2
00027a  62c1              STR      r1,[r0,#0x2c]
;;;710    	//2HZ
;;;711    	L005_LPTIM->CR_f.TR=1;
00027c  6ac1              LDR      r1,[r0,#0x2c]
00027e  4311              ORRS     r1,r1,r2
000280  62c1              STR      r1,[r0,#0x2c]
;;;712    	
;;;713    	//设置P31输出LPTimer定时器信号
;;;714    //	L005_GPIO->P3ADS_f.P3ADS1 = 0;
;;;715    //	L005_GPIO->P31_SEL = 1;
;;;716    //	L005_GPIO->P3DIR_f.P3DIR1 = 0;
;;;717    }
000282  4770              BX       lr
;;;718    //===================================================================================
                          ENDP

                  DoIccTest_DeepSleep_1 PROC
;;;529    // DeepSleep, NoIP work
;;;530    void DoIccTest_DeepSleep_1(uint8_t Test_Option )
000284  2200              MOVS     r2,#0
;;;531    {
;;;532    	L005_SystemCtrl->PERI_CLKEN = 0xffffffff;
000286  4962              LDR      r1,|L1.1040|
000288  43d2              MVNS     r2,r2
00028a  620a              STR      r2,[r1,#0x20]
;;;533    	switch(Test_Option)
00028c  381f              SUBS     r0,r0,#0x1f
00028e  2807              CMP      r0,#7
000290  d228              BCS      |L1.740|
000292  0002              MOVS     r2,r0
000294  447a              ADD      r2,r2,pc
000296  7912              LDRB     r2,[r2,#4]
000298  1892              ADDS     r2,r2,r2
00029a  4497              ADD      pc,pc,r2
00029c  030d1318          DCB      0x03,0x0d,0x13,0x18
0002a0  1b1e2100          DCB      0x1b,0x1e,0x21,0x00
;;;534    	{
;;;535    		case DEEPSLEEP_RTC_WDT_LPT://29 ok...
;;;536    			X32_init();
0002a4  f7fffffe          BL       X32_init
;;;537    			BTIMERLP_init(0);
0002a8  2000              MOVS     r0,#0
0002aa  f7fffffe          BL       BTIMERLP_init
;;;538    			RTC_init();
0002ae  f7fffffe          BL       RTC_init
;;;539    			WDT_init();
0002b2  f7fffffe          BL       WDT_init
;;;540    			break;
0002b6  e015              B        |L1.740|
;;;541    		case DEEPSLEEP_LPTIMER_X32K://30 ok...
;;;542    			X32_init();
0002b8  f7fffffe          BL       X32_init
;;;543    			BTIMERLP_init(0);
0002bc  2000              MOVS     r0,#0
0002be  f7fffffe          BL       BTIMERLP_init
;;;544    			break;
0002c2  e00f              B        |L1.740|
;;;545    		case DEEPSLEEP_RTC://31 ok...
;;;546    			X32_init();
0002c4  f7fffffe          BL       X32_init
;;;547    			RTC_init();
0002c8  f7fffffe          BL       RTC_init
;;;548    			break;
0002cc  e00a              B        |L1.740|
;;;549    		case DEEPSLEEP_X32K://32 ok...
;;;550    			X32_init();
0002ce  f7fffffe          BL       X32_init
;;;551    			break;
0002d2  e007              B        |L1.740|
;;;552    		case DEEPSLEEP_IRC32K://33 ok
;;;553    			IRC32K();
0002d4  f7fffffe          BL       IRC32K
;;;554    			break;
0002d8  e004              B        |L1.740|
;;;555    		case DEEPSLEEP_WDT://34 ok...
;;;556    			WDT_init();
0002da  f7fffffe          BL       WDT_init
;;;557    			break;
0002de  e001              B        |L1.740|
;;;558    		case DEEPSLEEP://35 ok...
;;;559    			L005_SystemCtrl->PERI_CLKEN = 0x0;	
0002e0  2000              MOVS     r0,#0
0002e2  6208              STR      r0,[r1,#0x20]
                  |L1.740|
;;;560    			break;
;;;561    		default: 
;;;562    			break;
;;;563    	}
;;;564    
;;;565    	//deepsleep
;;;566    	SCB_SCR = 0x01<<2 ;
0002e4  494e              LDR      r1,|L1.1056|
0002e6  2004              MOVS     r0,#4
0002e8  6108              STR      r0,[r1,#0x10]
;;;567    	__WFI();
0002ea  bf30              WFI      
;;;568    	__WFI();
0002ec  bf30              WFI      
                  |L1.750|
;;;569    	while( 1 );
0002ee  e7fe              B        |L1.750|
;;;570    }
;;;571    
                          ENDP

                  DoIccTest_ActiveOrSleep_1 PROC
;;;333    // CpuMode=0 代表sleep , CpuMode=1 代表Active
;;;334    void DoIccTest_ActiveOrSleep_1( uint8_t CpuMode, uint8_t Per_switch, uint8_t nop_switch, uint8_t RCH_Clk)
0002f0  4c47              LDR      r4,|L1.1040|
;;;335    {
;;;336    	//切24M
;;;337    	L005_SystemCtrl->RCH_CR_f.FSEL = RCH_Clk;
0002f2  68e5              LDR      r5,[r4,#0xc]
0002f4  2603              MOVS     r6,#3
0002f6  0276              LSLS     r6,r6,#9
0002f8  079b              LSLS     r3,r3,#30
0002fa  43b5              BICS     r5,r5,r6
0002fc  0d5b              LSRS     r3,r3,#21
0002fe  431d              ORRS     r5,r5,r3
000300  60e5              STR      r5,[r4,#0xc]
;;;338    	if( L005_SystemCtrl->RCH_CR_f.FSEL == RCH24M ) { L005_SystemCtrl->RCH_CR_f.TRIM = RCH_24M_TRIM; }
000302  68e3              LDR      r3,[r4,#0xc]
000304  055b              LSLS     r3,r3,#21
000306  0f9b              LSRS     r3,r3,#30
000308  2b03              CMP      r3,#3
00030a  d105              BNE      |L1.792|
00030c  68e3              LDR      r3,[r4,#0xc]
00030e  0a5b              LSRS     r3,r3,#9
000310  025b              LSLS     r3,r3,#9
000312  33ff              ADDS     r3,r3,#0xff
000314  3367              ADDS     r3,r3,#0x67
000316  60e3              STR      r3,[r4,#0xc]
                  |L1.792|
;;;339    	if( L005_SystemCtrl->RCH_CR_f.FSEL == RCH16M ) { L005_SystemCtrl->RCH_CR_f.TRIM = RCH_16M_TRIM; }
000318  68e3              LDR      r3,[r4,#0xc]
00031a  055b              LSLS     r3,r3,#21
00031c  0f9b              LSRS     r3,r3,#30
00031e  2b02              CMP      r3,#2
000320  d105              BNE      |L1.814|
000322  68e3              LDR      r3,[r4,#0xc]
000324  0a5b              LSRS     r3,r3,#9
000326  025b              LSLS     r3,r3,#9
000328  33ff              ADDS     r3,r3,#0xff
00032a  336a              ADDS     r3,r3,#0x6a
00032c  60e3              STR      r3,[r4,#0xc]
                  |L1.814|
;;;340    	if( L005_SystemCtrl->RCH_CR_f.FSEL == RCH8M )  { L005_SystemCtrl->RCH_CR_f.TRIM = RCH_8M_TRIM; }
00032e  68e3              LDR      r3,[r4,#0xc]
000330  055b              LSLS     r3,r3,#21
000332  0f9b              LSRS     r3,r3,#30
000334  2b01              CMP      r3,#1
000336  d105              BNE      |L1.836|
000338  68e3              LDR      r3,[r4,#0xc]
00033a  0a5b              LSRS     r3,r3,#9
00033c  025b              LSLS     r3,r3,#9
00033e  33ff              ADDS     r3,r3,#0xff
000340  3368              ADDS     r3,r3,#0x68
000342  60e3              STR      r3,[r4,#0xc]
                  |L1.836|
;;;341    	if( L005_SystemCtrl->RCH_CR_f.FSEL == RCH4M )  { L005_SystemCtrl->RCH_CR_f.TRIM = RCH_4M_TRIM; }
000344  68e3              LDR      r3,[r4,#0xc]
000346  055b              LSLS     r3,r3,#21
000348  0f9b              LSRS     r3,r3,#30
00034a  d105              BNE      |L1.856|
00034c  68e3              LDR      r3,[r4,#0xc]
00034e  0a5b              LSRS     r3,r3,#9
000350  025b              LSLS     r3,r3,#9
000352  33ff              ADDS     r3,r3,#0xff
000354  3366              ADDS     r3,r3,#0x66
000356  60e3              STR      r3,[r4,#0xc]
                  |L1.856|
;;;342    	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
000358  4d2f              LDR      r5,|L1.1048|
00035a  60a5              STR      r5,[r4,#8]
;;;343    	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
00035c  4e2f              LDR      r6,|L1.1052|
00035e  60a6              STR      r6,[r4,#8]
;;;344    	L005_SystemCtrl->SYSCTRL0_f.RCH_EN = 1;
000360  6823              LDR      r3,[r4,#0]
000362  2701              MOVS     r7,#1
000364  433b              ORRS     r3,r3,r7
000366  6023              STR      r3,[r4,#0]
                  |L1.872|
;;;345    	//L005_FLASH->CR_f.WAIT = 1;//
;;;346        
;;;347    	while( L005_SystemCtrl->RCH_CR_f.stable == 0);
000368  68e3              LDR      r3,[r4,#0xc]
00036a  051b              LSLS     r3,r3,#20
00036c  d5fc              BPL      |L1.872|
;;;348    	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
00036e  60a5              STR      r5,[r4,#8]
;;;349    	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
000370  60a6              STR      r6,[r4,#8]
;;;350    	L005_SystemCtrl->SYSCTRL0_f.Clk_sw4_sel = 0x00;
000372  6823              LDR      r3,[r4,#0]
000374  2530              MOVS     r5,#0x30
000376  43ab              BICS     r3,r3,r5
000378  6023              STR      r3,[r4,#0]
;;;351    	
;;;352            P24_SetOutput();
00037a  4b23              LDR      r3,|L1.1032|
00037c  681d              LDR      r5,[r3,#0]
00037e  2610              MOVS     r6,#0x10
000380  43b5              BICS     r5,r5,r6
000382  601d              STR      r5,[r3,#0]
;;;353    	L005_GPIO->P24_SEL = 0X03;
000384  4d2e              LDR      r5,|L1.1088|
000386  2303              MOVS     r3,#3
000388  612b              STR      r3,[r5,#0x10]
;;;354    	L005_GPIO->GPIO_CTRL1_f.hclk_sel = 0X03;
00038a  4b2e              LDR      r3,|L1.1092|
00038c  685d              LDR      r5,[r3,#4]
00038e  2603              MOVS     r6,#3
000390  02b6              LSLS     r6,r6,#10
000392  4335              ORRS     r5,r5,r6
000394  605d              STR      r5,[r3,#4]
;;;355    	L005_GPIO->GPIO_CTRL1_f.hclk_en = 1;
000396  685d              LDR      r5,[r3,#4]
000398  2601              MOVS     r6,#1
00039a  0376              LSLS     r6,r6,#13
00039c  4335              ORRS     r5,r5,r6
00039e  605d              STR      r5,[r3,#4]
;;;356        
;;;357    	L005_SystemCtrl->PERI_CLKEN = PeriClkON;  	//打开指定的CLK
0003a0  2300              MOVS     r3,#0
0003a2  43db              MVNS     r3,r3
0003a4  6223              STR      r3,[r4,#0x20]
;;;358    	if(Per_switch == PERON)
0003a6  2500              MOVS     r5,#0
0003a8  2901              CMP      r1,#1
0003aa  d002              BEQ      |L1.946|
;;;359    		L005_SystemCtrl->PERI_CLKEN = PeriClkON;
;;;360    	else if(Per_switch == PEROFF)
0003ac  2900              CMP      r1,#0
0003ae  d002              BEQ      |L1.950|
0003b0  e002              B        |L1.952|
                  |L1.946|
0003b2  6223              STR      r3,[r4,#0x20]         ;359
0003b4  e000              B        |L1.952|
                  |L1.950|
;;;361    		L005_SystemCtrl->PERI_CLKEN = PeriClkOFF;
0003b6  6225              STR      r5,[r4,#0x20]
                  |L1.952|
;;;362    
;;;363    	if( CpuMode == 0x00 )
0003b8  2800              CMP      r0,#0
0003ba  d003              BEQ      |L1.964|
;;;364    	{
;;;365    		SCB_SCR = 0x00;	//sleep
;;;366    		__WFI();
;;;367    		while(1);
;;;368    	}
;;;369    	else
;;;370    	{
;;;371    		if(nop_switch == NOP_EN)
0003bc  2a01              CMP      r2,#1
0003be  d005              BEQ      |L1.972|
;;;372    		{	
;;;373    			while( 1 );
;;;374    		}
;;;375    		else
;;;376    		{
;;;377    			__NOP();
0003c0  bf00              NOP      
                  |L1.962|
;;;378    			while( 1 );
0003c2  e7fe              B        |L1.962|
                  |L1.964|
0003c4  4816              LDR      r0,|L1.1056|
0003c6  6105              STR      r5,[r0,#0x10]         ;365
0003c8  bf30              WFI                            ;366
                  |L1.970|
0003ca  e7fe              B        |L1.970|
                  |L1.972|
0003cc  e7fe              B        |L1.972|
;;;379    		}		
;;;380    	}
;;;381    	
;;;382    }
;;;383    
                          ENDP

                  GPIO_SetLowpowerMode PROC
;;;584    //===================================================================================
;;;585    void GPIO_SetLowpowerMode( void )
0003ce  b430              PUSH     {r4,r5}
;;;586    {
;;;587    	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
0003d0  480f              LDR      r0,|L1.1040|
0003d2  4911              LDR      r1,|L1.1048|
0003d4  6081              STR      r1,[r0,#8]
;;;588    	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
0003d6  4911              LDR      r1,|L1.1052|
0003d8  6081              STR      r1,[r0,#8]
;;;589    	L005_SystemCtrl->SYSCTRL1 |= (1<<8); // swd as io
0003da  6841              LDR      r1,[r0,#4]
0003dc  1582              ASRS     r2,r0,#22
0003de  4311              ORRS     r1,r1,r2
0003e0  6041              STR      r1,[r0,#4]
;;;590    	
;;;591    	L005_GPIO->P0ADS = 0X00;
0003e2  4a06              LDR      r2,|L1.1020|
0003e4  2000              MOVS     r0,#0
0003e6  60d0              STR      r0,[r2,#0xc]
;;;592    	L005_GPIO->P1ADS = 0X00;
0003e8  4b0a              LDR      r3,|L1.1044|
0003ea  60d8              STR      r0,[r3,#0xc]
;;;593    	L005_GPIO->P2ADS = 0X00;
0003ec  4d06              LDR      r5,|L1.1032|
0003ee  60e8              STR      r0,[r5,#0xc]
;;;594    	L005_GPIO->P3ADS = 0X00;
0003f0  4c06              LDR      r4,|L1.1036|
0003f2  60e0              STR      r0,[r4,#0xc]
;;;595    	
;;;596    	L005_GPIO->P0DIR = 0xff;//输入
0003f4  21ff              MOVS     r1,#0xff
0003f6  6011              STR      r1,[r2,#0]
;;;597    	L005_GPIO->P1DIR = 0xff;
0003f8  6019              STR      r1,[r3,#0]
;;;598    	L005_GPIO->P2DIR = 0xff;
0003fa  e025              B        |L1.1096|
                  |L1.1020|
                          DCD      0x40020d00
                  |L1.1024|
                          DCD      0x00009c40
                  |L1.1028|
                          DCD      0x00030d40
                  |L1.1032|
                          DCD      0x40020d80
                  |L1.1036|
                          DCD      0x40020dc0
                  |L1.1040|
                          DCD      0x40002000
                  |L1.1044|
                          DCD      0x40020d40
                  |L1.1048|
                          DCD      0x00005a5a
                  |L1.1052|
                          DCD      0x0000a5a5
                  |L1.1056|
                          DCD      0xe000ed00
                  |L1.1060|
                          DCD      0x40000c80
                  |L1.1064|
                          DCD      0x40001400
                  |L1.1068|
                          DCD      0x00006ff8
                  |L1.1072|
                          DCD      0x40002040
                  |L1.1076|
                          DCD      0xe000e280
                  |L1.1080|
                          DCD      0xe000e410
                  |L1.1084|
                          DCD      0x40000c40
                  |L1.1088|
                          DCD      0x40020c80
                  |L1.1092|
                          DCD      0x40020f00
                  |L1.1096|
000448  6029              STR      r1,[r5,#0]
;;;599    	L005_GPIO->P3DIR = 0xff;
00044a  6021              STR      r1,[r4,#0]
;;;600    	
;;;601    	L005_GPIO->P0PU  = 0x00;
00044c  6210              STR      r0,[r2,#0x20]
;;;602    	L005_GPIO->P1PU  = 0x00;
00044e  6218              STR      r0,[r3,#0x20]
;;;603    	L005_GPIO->P2PU  = 0x00;
000450  6228              STR      r0,[r5,#0x20]
;;;604    	L005_GPIO->P3PU  = 0x00;
000452  6220              STR      r0,[r4,#0x20]
;;;605    	
;;;606    	L005_GPIO->P0PD = 0xff;
000454  6251              STR      r1,[r2,#0x24]
;;;607    	L005_GPIO->P1PD = 0xff;
000456  6259              STR      r1,[r3,#0x24]
;;;608    	L005_GPIO->P2PD = 0xff;
000458  6269              STR      r1,[r5,#0x24]
;;;609    	L005_GPIO->P3PD = 0xff;
00045a  6261              STR      r1,[r4,#0x24]
;;;610    	
;;;611    }
00045c  bc30              POP      {r4,r5}
00045e  4770              BX       lr
;;;612    void X32_init(void)
                          ENDP

                  main PROC
;;;258    
;;;259    int main(void)
000460  2000              MOVS     r0,#0
;;;260    {
;;;261    	uint8_t TestIdx = ACTIVE_PERON_RCH24M;
;;;262    	L005_SystemCtrl->PERI_CLKEN = 0xffffffff;
000462  499b              LDR      r1,|L1.1744|
000464  43c0              MVNS     r0,r0
000466  6208              STR      r0,[r1,#0x20]
;;;263    	L005_SystemCtrl->BOOT0_f.auto_switch_lpm = 1;
000468  489a              LDR      r0,|L1.1748|
00046a  6841              LDR      r1,[r0,#4]
00046c  2208              MOVS     r2,#8
00046e  4311              ORRS     r1,r1,r2
000470  6041              STR      r1,[r0,#4]
;;;264    	L005_PMU->PMU_f.TRIM_V1P5 = PMU_1V5_TRIM;
000472  4899              LDR      r0,|L1.1752|
000474  6b41              LDR      r1,[r0,#0x34]
000476  09c9              LSRS     r1,r1,#7
000478  01c9              LSLS     r1,r1,#7
00047a  3131              ADDS     r1,r1,#0x31
00047c  6341              STR      r1,[r0,#0x34]
;;;265    	
;;;266    	P03_SetLow();
00047e  4897              LDR      r0,|L1.1756|
000480  6881              LDR      r1,[r0,#8]
000482  4391              BICS     r1,r1,r2
000484  6081              STR      r1,[r0,#8]
;;;267    	P03_SetOutput();
000486  6801              LDR      r1,[r0,#0]
000488  4391              BICS     r1,r1,r2
00048a  6001              STR      r1,[r0,#0]
;;;268    	//TestIdx = Key_Scan();
;;;269    	
;;;270    	GPIO_SetLowpowerMode();
00048c  f7fffffe          BL       GPIO_SetLowpowerMode
;;;271    	
;;;272    	McuDelay( 1000 );  //处理按键没有按下却读到低的情况（当外接示波器时，可能出现该情况）
000490  207d              MOVS     r0,#0x7d
000492  00c0              LSLS     r0,r0,#3
000494  f7fffffe          BL       McuDelay
;;;273    	
;;;274        GPIO_Test();
000498  f7fffffe          BL       GPIO_Test
;;;275        
;;;276    	switch( TestIdx )
;;;277    	{
;;;278    		case ACTIVE_PERON_RCH4M:      DoIccTest_ActiveOrSleep_1( 1, PERON, NOP_EN, RCH4M);	    break;
;;;279    		case ACTIVE_PERON_NOP_RCH4M:  DoIccTest_ActiveOrSleep_1( 1, PERON, NOP_OFF, RCH4M);	    break;    
;;;280    		case ACTIVE_PERON_RCH8M:      DoIccTest_ActiveOrSleep_1( 1, PERON, NOP_EN, RCH8M);	    break;
;;;281    		case ACTIVE_PERON_NOP_RCH8M:  DoIccTest_ActiveOrSleep_1( 1, PERON, NOP_OFF, RCH8M);	    break;
;;;282    		case ACTIVE_PERON_RCH16M:     DoIccTest_ActiveOrSleep_1( 1, PERON, NOP_EN, RCH16M);	    break;
;;;283    		case ACTIVE_PERON_NOP_RCH16M: DoIccTest_ActiveOrSleep_1( 1, PERON, NOP_OFF, RCH16M);    break;
;;;284    		case ACTIVE_PERON_RCH24M:     DoIccTest_ActiveOrSleep_1( 1, PERON, NOP_EN, RCH24M);	    break;
00049c  2201              MOVS     r2,#1
00049e  2303              MOVS     r3,#3
0004a0  4611              MOV      r1,r2
0004a2  4610              MOV      r0,r2
0004a4  f7fffffe          BL       DoIccTest_ActiveOrSleep_1
;;;285    		case ACTIVE_PERON_NOP_RCH24M: DoIccTest_ActiveOrSleep_1( 1, PERON, NOP_OFF, RCH24M);    break;
;;;286    		
;;;287    		case ACTIVE_PEROFF_RCH4M:      DoIccTest_ActiveOrSleep_1( 1, PEROFF, NOP_EN, RCH4M);	break;
;;;288    		case ACTIVE_PEROFF_NOP_RCH4M:  DoIccTest_ActiveOrSleep_1( 1, PEROFF, NOP_OFF, RCH4M);	break;    
;;;289    		case ACTIVE_PEROFF_RCH8M:      DoIccTest_ActiveOrSleep_1( 1, PEROFF, NOP_EN, RCH8M);	break;
;;;290    		case ACTIVE_PEROFF_NOP_RCH8M:  DoIccTest_ActiveOrSleep_1( 1, PEROFF, NOP_OFF, RCH8M);	break;
;;;291    		case ACTIVE_PEROFF_RCH16M:     DoIccTest_ActiveOrSleep_1( 1, PEROFF, NOP_EN, RCH16M);	break;
;;;292    		case ACTIVE_PEROFF_NOP_RCH16M: DoIccTest_ActiveOrSleep_1( 1, PEROFF, NOP_OFF, RCH16M);  break;
;;;293    		case ACTIVE_PEROFF_RCH24M:     DoIccTest_ActiveOrSleep_1( 1, PEROFF, NOP_EN, RCH24M);	break;
;;;294    		case ACTIVE_PEROFF_NOP_RCH24M: DoIccTest_ActiveOrSleep_1( 1, PEROFF, NOP_OFF, RCH24M);  break;
;;;295    		
;;;296    		case SLEEP_PERON_RCH4M:        DoIccTest_ActiveOrSleep_1( 0, PERON, NOP_OFF, RCH4M);	break;
;;;297    		case SLEEP_PERON_RCH8M:        DoIccTest_ActiveOrSleep_1( 0, PERON, NOP_OFF, RCH8M);	break;
;;;298    		case SLEEP_PERON_RCH16M:       DoIccTest_ActiveOrSleep_1( 0, PERON, NOP_OFF, RCH16M);	break;
;;;299    		case SLEEP_PERON_RCH24M:       DoIccTest_ActiveOrSleep_1( 0, PERON, NOP_OFF, RCH24M);	break;
;;;300    		
;;;301    		case SLEEP_PEROFF_RCH4M:       DoIccTest_ActiveOrSleep_1( 0, PEROFF, NOP_OFF, RCH4M);	break;
;;;302    		case SLEEP_PEROFF_RCH8M:       DoIccTest_ActiveOrSleep_1( 0, PEROFF, NOP_OFF, RCH8M);	break;
;;;303    		case SLEEP_PEROFF_RCH16M:      DoIccTest_ActiveOrSleep_1( 0, PEROFF, NOP_OFF, RCH16M);	break;
;;;304    		case SLEEP_PEROFF_RCH24M:      DoIccTest_ActiveOrSleep_1( 0, PEROFF, NOP_OFF, RCH24M);	break;
;;;305    
;;;306    		case ACTIVE_PERON_XTL32K:      DoIccTest_ActiveOrSleep_4( 1, PERON, NOP_OFF, 0); break;
;;;307    		case ACTIVE_PEROFF_XTL32K:     DoIccTest_ActiveOrSleep_4( 1, PEROFF, NOP_OFF, 0); break;
;;;308    		case SLEEP_LPtimer_RTC_XTL32K: DoIccTest_ActiveOrSleep_4( 0, PEROFF, NOP_OFF, ((1<<9) | (1<< 20))); break;
;;;309            case SLEEP_PERON_XTL32K:       DoIccTest_ActiveOrSleep_4( 0, PERON, NOP_OFF, 0); break;
;;;310    		
;;;311    		case DEEPSLEEP_RTC_WDT_LPT:    DoIccTest_DeepSleep_1(DEEPSLEEP_RTC_WDT_LPT); break;
;;;312    		case DEEPSLEEP_LPTIMER_X32K:   DoIccTest_DeepSleep_1(DEEPSLEEP_LPTIMER_X32K); break;
;;;313    		case DEEPSLEEP_RTC:            DoIccTest_DeepSleep_1(DEEPSLEEP_RTC); break;
;;;314    		case DEEPSLEEP_X32K:           DoIccTest_DeepSleep_1(DEEPSLEEP_X32K); break;
;;;315    		case DEEPSLEEP_IRC32K:         DoIccTest_DeepSleep_1( DEEPSLEEP_IRC32K ); break; 
;;;316    		case DEEPSLEEP_WDT:            DoIccTest_DeepSleep_1(DEEPSLEEP_WDT); break; 
;;;317    		case DEEPSLEEP:				   DoIccTest_DeepSleep_1(DEEPSLEEP); break;
;;;318    		
;;;319    		//add test case
;;;320    		case ACTIVE_PERON_NOP_XTL32K:  DoIccTest_ActiveOrSleep_4( 1, PERON, NOP_EN, 0);	break;
;;;321    		case ACTIVE_PEROFF_NOP_XTL32K: DoIccTest_ActiveOrSleep_4( 1, PEROFF, NOP_EN, 0);	break;
;;;322    	
;;;323    		default: Test(); break;
;;;324    	}
;;;325    	
;;;326    	while(1);
;;;327    	
;;;328    }
;;;329    
                          ENDP

                  DoIccTest_ActiveOrSleep_2 PROC
;;;386    // CpuMode=0 代表sleep , CpuMode=1 代表Active
;;;387    void DoIccTest_ActiveOrSleep_2( uint8_t CpuMode )
0004a8  4684              MOV      r12,r0
;;;388    {
;;;389    //	L005_SystemCtrl->BOOT1_f.XTH_TEST |= 0X1;//别忘了重新上电
;;;390    	//切32M
;;;391    	L005_GPIO->P0ADS_f.P0ADS1 = 1;
0004aa  4c8c              LDR      r4,|L1.1756|
0004ac  68e0              LDR      r0,[r4,#0xc]
0004ae  2202              MOVS     r2,#2
0004b0  4310              ORRS     r0,r0,r2
0004b2  60e0              STR      r0,[r4,#0xc]
;;;392    	L005_GPIO->P0ADS_f.P0ADS2 = 1;
0004b4  68e0              LDR      r0,[r4,#0xc]
0004b6  2604              MOVS     r6,#4
0004b8  4330              ORRS     r0,r0,r6
0004ba  60e0              STR      r0,[r4,#0xc]
;;;393    	L005_SystemCtrl->XTH_CR_f.Driver = 0xf;
0004bc  4984              LDR      r1,|L1.1744|
0004be  6908              LDR      r0,[r1,#0x10]
0004c0  230f              MOVS     r3,#0xf
0004c2  4318              ORRS     r0,r0,r3
0004c4  6108              STR      r0,[r1,#0x10]
;;;394    	L005_SystemCtrl->XTH_CR_f.Startup = 3;//默认为2
0004c6  6908              LDR      r0,[r1,#0x10]
0004c8  2730              MOVS     r7,#0x30
0004ca  4338              ORRS     r0,r0,r7
0004cc  6108              STR      r0,[r1,#0x10]
;;;395    	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
0004ce  4884              LDR      r0,|L1.1760|
0004d0  6088              STR      r0,[r1,#8]
;;;396    	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
0004d2  4d84              LDR      r5,|L1.1764|
0004d4  608d              STR      r5,[r1,#8]
;;;397    	L005_SystemCtrl->SYSCTRL0_f.XTH_EN = 1;
0004d6  680b              LDR      r3,[r1,#0]
0004d8  4313              ORRS     r3,r3,r2
0004da  600b              STR      r3,[r1,#0]
;;;398    	L005_FLASH->CR_f.WAIT = 1;//当从低速时钟切换到外部高速时钟时需要设置flash读等待周期为1
0004dc  4b82              LDR      r3,|L1.1768|
0004de  6a1a              LDR      r2,[r3,#0x20]
0004e0  4332              ORRS     r2,r2,r6
0004e2  621a              STR      r2,[r3,#0x20]
                  |L1.1252|
;;;399    	
;;;400    	while( L005_SystemCtrl->XTH_CR_f.stable == 0);
0004e4  690a              LDR      r2,[r1,#0x10]
0004e6  0652              LSLS     r2,r2,#25
0004e8  d5fc              BPL      |L1.1252|
;;;401    	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
0004ea  6088              STR      r0,[r1,#8]
;;;402    	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
0004ec  608d              STR      r5,[r1,#8]
;;;403    	L005_SystemCtrl->SYSCTRL0_f.Clk_sw4_sel = 0x01;   //0=RCH , 1=XTH , 2=RCL , 3=XTL
0004ee  680a              LDR      r2,[r1,#0]
0004f0  43ba              BICS     r2,r2,r7
0004f2  3210              ADDS     r2,r2,#0x10
0004f4  600a              STR      r2,[r1,#0]
;;;404    	
;;;405    	//关RCH
;;;406    	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
0004f6  6088              STR      r0,[r1,#8]
;;;407    	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
0004f8  608d              STR      r5,[r1,#8]
;;;408    	L005_SystemCtrl->SYSCTRL0_f.RCH_EN = 0;
0004fa  6808              LDR      r0,[r1,#0]
0004fc  0840              LSRS     r0,r0,#1
0004fe  0040              LSLS     r0,r0,#1
000500  6008              STR      r0,[r1,#0]
;;;409    	
;;;410    	L005_SystemCtrl->PERI_CLKEN = PeriClkON;  			  //打开指定的CLK
000502  2000              MOVS     r0,#0
000504  43c0              MVNS     r0,r0
000506  6208              STR      r0,[r1,#0x20]
;;;411    	if( CpuMode == 0x00 )
000508  4660              MOV      r0,r12
00050a  2800              CMP      r0,#0
00050c  d102              BNE      |L1.1300|
;;;412    	{
;;;413    		SCB_SCR = 0x00;	//sleep
00050e  4977              LDR      r1,|L1.1772|
000510  6108              STR      r0,[r1,#0x10]
;;;414    		__WFI();
000512  bf30              WFI      
                  |L1.1300|
;;;415    	}
;;;416    	while(1)
;;;417    	{
;;;418    		if(P03_GetValue() == 0)
000514  6860              LDR      r0,[r4,#4]
000516  0700              LSLS     r0,r0,#28
000518  d400              BMI      |L1.1308|
                  |L1.1306|
;;;419    		{	
;;;420    			while( 1 );
00051a  e7fe              B        |L1.1306|
                  |L1.1308|
;;;421    		}
;;;422    		else
;;;423    		{
;;;424    			while( 1 );
00051c  e7fe              B        |L1.1308|
;;;425    		}
;;;426    	}
;;;427    }
;;;428    
                          ENDP

                  DoIccTest_ActiveOrSleep_3 PROC
;;;432    // CpuMode=0 代表sleep , CpuMode=1 代表Active
;;;433    void DoIccTest_ActiveOrSleep_3( uint8_t CpuMode )
00051e  496c              LDR      r1,|L1.1744|
;;;434    {
;;;435    	//切rc32k
;;;436    	L005_SystemCtrl->RCL_CR_f.FSEL = RCL_SEL;
000520  694a              LDR      r2,[r1,#0x14]
000522  154b              ASRS     r3,r1,#21
000524  439a              BICS     r2,r2,r3
000526  614a              STR      r2,[r1,#0x14]
;;;437    	if( L005_SystemCtrl->RCL_CR_f.FSEL == RCL32K ) { L005_SystemCtrl->RCL_CR_f.TRIM = RCL_32K_TRIM; }
000528  694a              LDR      r2,[r1,#0x14]
00052a  0592              LSLS     r2,r2,#22
00052c  d404              BMI      |L1.1336|
00052e  694a              LDR      r2,[r1,#0x14]
000530  0a52              LSRS     r2,r2,#9
000532  0252              LSLS     r2,r2,#9
000534  32ee              ADDS     r2,r2,#0xee
000536  614a              STR      r2,[r1,#0x14]
                  |L1.1336|
;;;438    	if( L005_SystemCtrl->RCL_CR_f.FSEL == RCL38K ) { L005_SystemCtrl->RCL_CR_f.TRIM = RCL_38K_TRIM; }
000538  694a              LDR      r2,[r1,#0x14]
00053a  0592              LSLS     r2,r2,#22
00053c  d504              BPL      |L1.1352|
00053e  694a              LDR      r2,[r1,#0x14]
000540  0a52              LSRS     r2,r2,#9
000542  0252              LSLS     r2,r2,#9
000544  32ee              ADDS     r2,r2,#0xee
000546  614a              STR      r2,[r1,#0x14]
                  |L1.1352|
;;;439    	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
000548  4c65              LDR      r4,|L1.1760|
00054a  608c              STR      r4,[r1,#8]
;;;440    	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
00054c  4b65              LDR      r3,|L1.1764|
00054e  608b              STR      r3,[r1,#8]
;;;441    	L005_SystemCtrl->SYSCTRL0_f.RCL_EN = 1;
000550  680a              LDR      r2,[r1,#0]
000552  2504              MOVS     r5,#4
000554  432a              ORRS     r2,r2,r5
000556  600a              STR      r2,[r1,#0]
                  |L1.1368|
;;;442    	
;;;443    	while( L005_SystemCtrl->RCL_CR_f.stable == 0);
000558  694a              LDR      r2,[r1,#0x14]
00055a  04d2              LSLS     r2,r2,#19
00055c  d5fc              BPL      |L1.1368|
;;;444    	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
00055e  608c              STR      r4,[r1,#8]
;;;445    	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
000560  608b              STR      r3,[r1,#8]
;;;446    	L005_SystemCtrl->SYSCTRL0_f.Clk_sw4_sel = 0x02;   //0=RCH , 1=XTH , 2=RCL , 3=XTL
000562  680a              LDR      r2,[r1,#0]
000564  2530              MOVS     r5,#0x30
000566  43aa              BICS     r2,r2,r5
000568  3220              ADDS     r2,r2,#0x20
00056a  600a              STR      r2,[r1,#0]
;;;447    	L005_SystemCtrl->PERI_CLKEN = PeriClkON;  		//打开指定的CLK
00056c  2200              MOVS     r2,#0
00056e  43d2              MVNS     r2,r2
000570  620a              STR      r2,[r1,#0x20]
;;;448    	
;;;449    	//关RCH
;;;450    	L005_SystemCtrl->SYSCTRL2 = 0X5A5A;
000572  608c              STR      r4,[r1,#8]
;;;451    	L005_SystemCtrl->SYSCTRL2 = 0XA5A5;
000574  608b              STR      r3,[r1,#8]
;;;452    	L005_SystemCtrl->SYSCTRL0_f.RCH_EN = 0;
000576  680a              LDR      r2,[r1,#0]
000578  0852              LSRS     r2,r2,#1
00057a  0052              LSLS     r2,r2,#1
00057c  600a              STR      r2,[r1,#0]
;;;453    	
;;;454    		
;;;455    	P24_SetOutput();
00057e  495c              LDR      r1,|L1.1776|
000580  680a              LDR      r2,[r1,#0]
000582  2310              MOVS     r3,#0x10
000584  439a              BICS     r2,r2,r3
000586  600a              STR      r2,[r1,#0]
;;;456    	L005_GPIO->P24_SEL = 0X03;
000588  4a5a              LDR      r2,|L1.1780|
00058a  2103              MOVS     r1,#3
00058c  6111              STR      r1,[r2,#0x10]
;;;457    	L005_GPIO->GPIO_CTRL1_f.hclk_sel = 0X00;
00058e  495a              LDR      r1,|L1.1784|
000590  684a              LDR      r2,[r1,#4]
000592  01ab              LSLS     r3,r5,#6
000594  439a              BICS     r2,r2,r3
000596  604a              STR      r2,[r1,#4]
;;;458    	L005_GPIO->GPIO_CTRL1_f.hclk_en = 1;
000598  684a              LDR      r2,[r1,#4]
00059a  2301              MOVS     r3,#1
00059c  035b              LSLS     r3,r3,#13
00059e  431a              ORRS     r2,r2,r3
0005a0  604a              STR      r2,[r1,#4]
;;;459    //	while( P32_GetValue() );
;;;460    //	P24_SetInput();
;;;461    //	L005_GPIO->P24_SEL =  0x00;
;;;462    //	L005_GPIO->GPIO_CTRL1_f.hclk_en = 0;
;;;463    //	
;;;464    //	L005_SystemCtrl->PERI_CLKEN = PeriClkON;  			  //打开指定的CLK
;;;465    	if( CpuMode == 0x00 )
0005a2  2800              CMP      r0,#0
0005a4  d102              BNE      |L1.1452|
;;;466    	{
;;;467    		SCB_SCR = 0x00;	//sleep
0005a6  4951              LDR      r1,|L1.1772|
0005a8  6108              STR      r0,[r1,#0x10]
;;;468    		__WFI();
0005aa  bf30              WFI      
                  |L1.1452|
;;;469    	}
;;;470    	while( 1 );
0005ac  e7fe              B        |L1.1452|
;;;471    	
;;;472    
;;;473    }
;;;474    
                          ENDP

                  DoIccTest_DeepSleep_2 PROC
;;;573    //deepSleep, RtcOn,  由宏RTC_SEL指定RTC时钟
;;;574    void DoIccTest_DeepSleep_2( void )
0005ae  4770              BX       lr
;;;575    {
;;;576    }
;;;577    
                          ENDP

                  DoIccTest_DeepSleep_3 PROC
;;;579    // deepSleep, LpUartOn , RC38.4K
;;;580    void DoIccTest_DeepSleep_3( void )
0005b0  4770              BX       lr
;;;581    {
;;;582    }
;;;583    
                          ENDP

                  Fun_WriteRegAndExeIns PROC
;;;824    
;;;825    void Fun_WriteRegAndExeIns( void )
0005b2  4952              LDR      r1,|L1.1788|
;;;826    {
;;;827    	if ( gWriteAddr )
0005b4  6848              LDR      r0,[r1,#4]  ; gWriteAddr
0005b6  2800              CMP      r0,#0
0005b8  d001              BEQ      |L1.1470|
;;;828    	{
;;;829    		*((volatile uint32_t * )gWriteAddr) = gWriteData;
0005ba  688a              LDR      r2,[r1,#8]  ; gWriteData
0005bc  6002              STR      r2,[r0,#0]
                  |L1.1470|
;;;830    	}
;;;831    
;;;832    	switch ( gMcuIns )
0005be  8848              LDRH     r0,[r1,#2]  ; gMcuIns
0005c0  4a4f              LDR      r2,|L1.1792|
0005c2  1880              ADDS     r0,r0,r2
0005c4  d003              BEQ      |L1.1486|
0005c6  2810              CMP      r0,#0x10
0005c8  d102              BNE      |L1.1488|
;;;833    	{
;;;834    		case 0xBF30:
;;;835    		{
;;;836    			//gWriteData = *((volatile unsigned int*)(0x40035200UL));
;;;837    			__WFI();
0005ca  bf30              WFI      
;;;838    			break;
0005cc  e000              B        |L1.1488|
                  |L1.1486|
;;;839    		}
;;;840    		case 0xBF20:
;;;841    		{
;;;842    			//gWriteData = *((volatile unsigned int*)(0x40035200UL));
;;;843    			__WFE();
0005ce  bf20              WFE      
                  |L1.1488|
;;;844    			break;
;;;845    		}
;;;846    		default:	break;
;;;847    	}
;;;848    
;;;849    	gMcuIns = 0x0000;
0005d0  2000              MOVS     r0,#0
0005d2  8048              STRH     r0,[r1,#2]
;;;850    	gWriteAddr = 0x0000;
0005d4  6048              STR      r0,[r1,#4]  ; gWriteAddr
;;;851    
;;;852    }
0005d6  4770              BX       lr
;;;853    
                          ENDP

                  Fun_CLA10 PROC
;;;749    
;;;750    uint8_t Fun_CLA10(uint8_t *PcOutBuf , uint8_t PcOutCnt , uint8_t *pPcInBuf , uint8_t *pPcInCnt)
0005d8  b4f0              PUSH     {r4-r7}
;;;751    {
0005da  468c              MOV      r12,r1
;;;752    	uint8_t ErrFlag;
;;;753    	uint16_t tmp16;
;;;754    	uint32_t addr32 , tmp32;
;;;755    
;;;756    
;;;757    	switch ( PcOutBuf[1] )
0005dc  7841              LDRB     r1,[r0,#1]
;;;758    	{
;;;759    			//1020 INS
;;;760    		case 0x20:	//执行MCU指令
;;;761    		{
;;;762    			gMcuIns  = (((uint32_t)PcOutBuf[2])<<8) | (((uint32_t)PcOutBuf[3])<<0);
0005de  4c47              LDR      r4,|L1.1788|
0005e0  2500              MOVS     r5,#0
0005e2  2920              CMP      r1,#0x20              ;757
0005e4  d007              BEQ      |L1.1526|
0005e6  2928              CMP      r1,#0x28              ;757
0005e8  d016              BEQ      |L1.1560|
0005ea  2929              CMP      r1,#0x29              ;757
0005ec  d03a              BEQ      |L1.1636|
;;;763    			if ( gMcuIns==0xBF30 || gMcuIns== 0xBF20)
;;;764    			{
;;;765    				ErrFlag = CRR_PASS;
;;;766    			}
;;;767    			else
;;;768    			{
;;;769    				ErrFlag = ERR_INS;
;;;770    			}
;;;771    			*pPcInCnt = 0x00;
;;;772    			break;
;;;773    		}
;;;774    
;;;775    		//1028 A3A2A1A0 V3V2V1V0 insh insl
;;;776    		case 0x28:
;;;777    		{
;;;778    			addr32 = (((uint32_t)PcOutBuf[2])<<24) | (((uint32_t)PcOutBuf[3])<<16) | (((uint32_t)PcOutBuf[4])<<8) | (((uint32_t)PcOutBuf[5])<<0);
;;;779    			tmp32  = (((uint32_t)PcOutBuf[6])<<24) | (((uint32_t)PcOutBuf[7])<<16) | (((uint32_t)PcOutBuf[8])<<8) | (((uint32_t)PcOutBuf[9])<<0);
;;;780    			tmp16  = (((uint32_t)PcOutBuf[10])<<8) | (((uint32_t)PcOutBuf[11])<<0);
;;;781    			if ( PcOutCnt == 10 )
;;;782    			{
;;;783    				*((volatile uint32_t * )addr32) = tmp32;		//??????
;;;784    				gMcuIns = 0x0000;
;;;785    				gWriteAddr = 0X0000;
;;;786    			}
;;;787    			else
;;;788    			{
;;;789    				gWriteAddr = addr32;				//?????MCU??????????
;;;790    				gWriteData = tmp32;
;;;791    				gMcuIns = tmp16;
;;;792    			}
;;;793    
;;;794    			*pPcInCnt = 0x00;
;;;795    			ErrFlag = CRR_PASS;
;;;796    			break;
;;;797    		}
;;;798    		//1029 A3 A2 A1 A0
;;;799    		case 0x29:
;;;800    		{
;;;801    			addr32 = (((uint32_t)PcOutBuf[2])<<24) | (((uint32_t)PcOutBuf[3])<<16) | (((uint32_t)PcOutBuf[4])<<8) | (((uint32_t)PcOutBuf[5])<<0);
;;;802    			tmp32  = *((volatile uint32_t * )addr32);
;;;803    			pPcInBuf[0] = (uint8_t)((tmp32>>24) & 0xff);
;;;804    			pPcInBuf[1] = (uint8_t)((tmp32>>16) & 0xff);
;;;805    			pPcInBuf[2] = (uint8_t)((tmp32>>8) & 0xff);
;;;806    			pPcInBuf[3] = (uint8_t)((tmp32>>0) & 0xff);
;;;807    			*pPcInCnt = 0x04;
;;;808    			ErrFlag = CRR_PASS;
;;;809    			break;
;;;810    		}
;;;811    		default:
;;;812    		{
;;;813    			PcInCnt=0x00;
0005ee  7065              STRB     r5,[r4,#1]
;;;814    			ErrFlag=ERR_INS;
0005f0  2071              MOVS     r0,#0x71
;;;815    			break;
;;;816    		}
;;;817    	}
;;;818    
;;;819    	return( ErrFlag );
;;;820    
;;;821    }
0005f2  bcf0              POP      {r4-r7}
0005f4  4770              BX       lr
                  |L1.1526|
0005f6  7881              LDRB     r1,[r0,#2]            ;762
0005f8  78c0              LDRB     r0,[r0,#3]            ;762
0005fa  0209              LSLS     r1,r1,#8              ;762
0005fc  4301              ORRS     r1,r1,r0              ;762
0005fe  8061              STRH     r1,[r4,#2]            ;762
000600  4840              LDR      r0,|L1.1796|
000602  4281              CMP      r1,r0                 ;763
000604  d002              BEQ      |L1.1548|
000606  4840              LDR      r0,|L1.1800|
000608  4281              CMP      r1,r0                 ;763
00060a  d101              BNE      |L1.1552|
                  |L1.1548|
00060c  2000              MOVS     r0,#0                 ;765
00060e  e000              B        |L1.1554|
                  |L1.1552|
000610  2071              MOVS     r0,#0x71              ;769
                  |L1.1554|
000612  701d              STRB     r5,[r3,#0]            ;771
000614  bcf0              POP      {r4-r7}
000616  4770              BX       lr
                  |L1.1560|
000618  7881              LDRB     r1,[r0,#2]            ;778
00061a  7942              LDRB     r2,[r0,#5]            ;778
00061c  0609              LSLS     r1,r1,#24             ;778
00061e  430a              ORRS     r2,r2,r1              ;778
000620  78c1              LDRB     r1,[r0,#3]            ;778
000622  7906              LDRB     r6,[r0,#4]            ;778
000624  0409              LSLS     r1,r1,#16             ;778
000626  0236              LSLS     r6,r6,#8              ;778
000628  4331              ORRS     r1,r1,r6              ;778
00062a  430a              ORRS     r2,r2,r1              ;778
00062c  7981              LDRB     r1,[r0,#6]            ;779
00062e  7a46              LDRB     r6,[r0,#9]            ;779
000630  0609              LSLS     r1,r1,#24             ;779
000632  430e              ORRS     r6,r6,r1              ;779
000634  79c1              LDRB     r1,[r0,#7]            ;779
000636  040f              LSLS     r7,r1,#16             ;779
000638  7a01              LDRB     r1,[r0,#8]            ;779
00063a  0209              LSLS     r1,r1,#8              ;779
00063c  430f              ORRS     r7,r7,r1              ;779
00063e  433e              ORRS     r6,r6,r7              ;779
000640  7a81              LDRB     r1,[r0,#0xa]          ;780
000642  7ac0              LDRB     r0,[r0,#0xb]          ;780
000644  0209              LSLS     r1,r1,#8              ;780
000646  4301              ORRS     r1,r1,r0              ;780
000648  4660              MOV      r0,r12                ;781
00064a  280a              CMP      r0,#0xa               ;781
00064c  d006              BEQ      |L1.1628|
00064e  6062              STR      r2,[r4,#4]            ;789  ; gWriteAddr
000650  60a6              STR      r6,[r4,#8]            ;790  ; gWriteData
000652  8061              STRH     r1,[r4,#2]            ;791
                  |L1.1620|
000654  701d              STRB     r5,[r3,#0]            ;794
000656  2000              MOVS     r0,#0                 ;795
000658  bcf0              POP      {r4-r7}
00065a  4770              BX       lr
                  |L1.1628|
00065c  6016              STR      r6,[r2,#0]            ;783
00065e  8065              STRH     r5,[r4,#2]            ;784
000660  6065              STR      r5,[r4,#4]            ;785  ; gWriteAddr
000662  e7f7              B        |L1.1620|
                  |L1.1636|
000664  7884              LDRB     r4,[r0,#2]            ;801
000666  7941              LDRB     r1,[r0,#5]            ;801
000668  0624              LSLS     r4,r4,#24             ;801
00066a  4321              ORRS     r1,r1,r4              ;801
00066c  78c4              LDRB     r4,[r0,#3]            ;801
00066e  7900              LDRB     r0,[r0,#4]            ;801
000670  0424              LSLS     r4,r4,#16             ;801
000672  0200              LSLS     r0,r0,#8              ;801
000674  4304              ORRS     r4,r4,r0              ;801
000676  4321              ORRS     r1,r1,r4              ;801
000678  6808              LDR      r0,[r1,#0]            ;802
00067a  0e01              LSRS     r1,r0,#24             ;803
00067c  7011              STRB     r1,[r2,#0]            ;803
00067e  0c01              LSRS     r1,r0,#16             ;804
000680  7051              STRB     r1,[r2,#1]            ;804
000682  0a01              LSRS     r1,r0,#8              ;805
000684  7091              STRB     r1,[r2,#2]            ;805
000686  70d0              STRB     r0,[r2,#3]            ;806
000688  2004              MOVS     r0,#4                 ;807
00068a  7018              STRB     r0,[r3,#0]            ;807
00068c  2000              MOVS     r0,#0                 ;808
00068e  bcf0              POP      {r4-r7}
000690  4770              BX       lr
;;;822    
                          ENDP

                  XSPI_Task PROC
;;;719    
;;;720    void XSPI_Task( void )
000692  b510              PUSH     {r4,lr}
;;;721    {
;;;722    	uint8_t ErrFlag;
;;;723    	
;;;724    	if ( XSPI_RecvMsgFromHostMcu( PcOutBuf , &PcOutCnt ) == CRR_PASS )
000694  4919              LDR      r1,|L1.1788|
000696  481d              LDR      r0,|L1.1804|
000698  f7fffffe          BL       XSPI_RecvMsgFromHostMcu
00069c  2800              CMP      r0,#0
00069e  d10e              BNE      |L1.1726|
;;;725    	{
;;;726    		switch ( PcOutBuf[0] )
0006a0  481a              LDR      r0,|L1.1804|
;;;727    		{
;;;728    			case 0x10:
;;;729    			{
;;;730    				ErrFlag = Fun_CLA10(PcOutBuf , PcOutCnt , PcInBuf , &PcInCnt);
0006a2  4c16              LDR      r4,|L1.1788|
0006a4  7800              LDRB     r0,[r0,#0]            ;726  ; PcOutBuf
0006a6  2810              CMP      r0,#0x10              ;726
0006a8  d00a              BEQ      |L1.1728|
;;;731    				break;
;;;732    			}
;;;733    		  
;;;734    			default  :
;;;735    			{
;;;736    				PcInCnt=0x00 ;
0006aa  2000              MOVS     r0,#0
0006ac  7060              STRB     r0,[r4,#1]
;;;737    				ErrFlag=ERR_Cla;
0006ae  2070              MOVS     r0,#0x70
                  |L1.1712|
;;;738    				break;
;;;739    			}
;;;740    		}
;;;741    	  
;;;742    		XSPI_SendMsgToMasterMcu( PcInBuf ,  PcInCnt ,  ErrFlag);
0006b0  4602              MOV      r2,r0
0006b2  7861              LDRB     r1,[r4,#1]  ; PcInCnt
0006b4  4816              LDR      r0,|L1.1808|
0006b6  f7fffffe          BL       XSPI_SendMsgToMasterMcu
;;;743    		Fun_WriteRegAndExeIns();
0006ba  f7fffffe          BL       Fun_WriteRegAndExeIns
                  |L1.1726|
;;;744    	}
;;;745    }
0006be  bd10              POP      {r4,pc}
                  |L1.1728|
0006c0  4b14              LDR      r3,|L1.1812|
0006c2  4a13              LDR      r2,|L1.1808|
0006c4  7821              LDRB     r1,[r4,#0]            ;730  ; PcOutCnt
0006c6  4811              LDR      r0,|L1.1804|
0006c8  f7fffffe          BL       Fun_CLA10
0006cc  e7f0              B        |L1.1712|
;;;746    
                          ENDP

0006ce  0000              DCW      0x0000
                  |L1.1744|
                          DCD      0x40002000
                  |L1.1748|
                          DCD      0x40002040
                  |L1.1752|
                          DCD      0x40002440
                  |L1.1756|
                          DCD      0x40020d00
                  |L1.1760|
                          DCD      0x00005a5a
                  |L1.1764|
                          DCD      0x0000a5a5
                  |L1.1768|
                          DCD      0x40020000
                  |L1.1772|
                          DCD      0xe000ed00
                  |L1.1776|
                          DCD      0x40020d80
                  |L1.1780|
                          DCD      0x40020c80
                  |L1.1784|
                          DCD      0x40020f00
                  |L1.1788|
                          DCD      ||.data||
                  |L1.1792|
                          DCD      0xffff40e0
                  |L1.1796|
                          DCD      0x0000bf30
                  |L1.1800|
                          DCD      0x0000bf20
                  |L1.1804|
                          DCD      ||.bss||
                  |L1.1808|
                          DCD      ||.bss||+0x100
                  |L1.1812|
                          DCD      ||.data||+0x1

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  PcOutBuf
                          %        256
                  PcInBuf
                          %        256

                          AREA ||.data||, DATA, ALIGN=2

                  PcOutCnt
000000  00                DCB      0x00
                  PcInCnt
000001  00                DCB      0x00
                  gMcuIns
000002  0000              DCW      0x0000
                  gWriteAddr
                          DCD      0x00000000
                  gWriteData
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_245491e6____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_245491e6____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_245491e6____REVSH|
#line 462
|__asm___6_main_c_245491e6____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
