; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\exe\slavemcu.o --asm_dir=.\Output\Listings\ --list_dir=.\Output\Listings\ --depend=.\output\exe\slavemcu.d --cpu=Cortex-M0+ --apcs=interwork -O1 -Otime --diag_suppress=9931 -I..\Src -I..\lib\inc -I.\RTE\_HC32L110_Demo -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM0plus\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DARMCM0P --omf_browse=.\output\exe\slavemcu.crf ..\Src\SlaveMcu.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  XSPI_Init PROC
;;;19     //==============================================================================
;;;20     void XSPI_Init( void )
000000  4881              LDR      r0,|L1.520|
;;;21     {
;;;22     	XSPI_NCS_SetInput();
000002  6801              LDR      r1,[r0,#0]
000004  2204              MOVS     r2,#4
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;23     	XSPI_SCK_SetInput();
00000a  6801              LDR      r1,[r0,#0]
00000c  2208              MOVS     r2,#8
00000e  4311              ORRS     r1,r1,r2
000010  6001              STR      r1,[r0,#0]
;;;24     	XSPI_MOSI_SetInput();
000012  6801              LDR      r1,[r0,#0]
000014  2210              MOVS     r2,#0x10
000016  4311              ORRS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;25     
;;;26     	XSPI_MISO_SetOutput();
00001a  487c              LDR      r0,|L1.524|
00001c  6801              LDR      r1,[r0,#0]
00001e  2220              MOVS     r2,#0x20
000020  4391              BICS     r1,r1,r2
000022  6001              STR      r1,[r0,#0]
;;;27     	XSPI_BUSY_SetOutput();
000024  6801              LDR      r1,[r0,#0]
000026  2340              MOVS     r3,#0x40
000028  4399              BICS     r1,r1,r3
00002a  6001              STR      r1,[r0,#0]
;;;28     	XSPI_MISO_SetLow();
00002c  6881              LDR      r1,[r0,#8]
00002e  4391              BICS     r1,r1,r2
000030  6081              STR      r1,[r0,#8]
;;;29     	XSPI_BUSY_SetLow();
000032  6881              LDR      r1,[r0,#8]
000034  4399              BICS     r1,r1,r3
000036  6081              STR      r1,[r0,#8]
;;;30     }
000038  4770              BX       lr
;;;31     
                          ENDP

                  XSPI_RecvOneByteFromHostMcu PROC
;;;34     //从HostMCU接收8bit数据
;;;35     uint8_t  XSPI_RecvOneByteFromHostMcu( uint8_t *pBuf )
00003a  b4f0              PUSH     {r4-r7}
;;;36     {
;;;37     	uint8_t i,tmp;
;;;38     
;;;39     	for ( i=0; i<8; i++ )
00003c  2200              MOVS     r2,#0
;;;40     	{
;;;41     		//等待SCK变高,
;;;42     		while ( XSPI_SCK_GetValue()==0x00 )
;;;43     		{
;;;44     			if ( XSPI_NCS_GetValue() == 0x00 )
;;;45     			{
;;;46     				return( ERR_XSPI_RX_TimeOut );
;;;47     			}
;;;48     		}
;;;49     
;;;50     		//读数据
;;;51     		tmp >>= 1;
;;;52     		if ( XSPI_MOSI_GetValue() )
;;;53     		{
;;;54     			tmp |= 0x80;
00003e  2780              MOVS     r7,#0x80
000040  4d71              LDR      r5,|L1.520|
;;;55     			//XSPI_MISO_SetHigh();
;;;56     		}
;;;57     		else
;;;58     		{
;;;59     			tmp &= 0x7f;
;;;60     			//XSPI_MISO_SetLow();
;;;61     		}
;;;62     
;;;63     		//拉高BUSY
;;;64     		XSPI_BUSY_SetHigh();
000042  4e72              LDR      r6,|L1.524|
000044  2340              MOVS     r3,#0x40
                  |L1.70|
000046  686c              LDR      r4,[r5,#4]            ;42
000048  0724              LSLS     r4,r4,#28             ;42
00004a  d408              BMI      |L1.94|
                  |L1.76|
00004c  686c              LDR      r4,[r5,#4]            ;44
00004e  0764              LSLS     r4,r4,#29             ;44
000050  d402              BMI      |L1.88|
;;;65     
;;;66     		//等待SCK变低
;;;67     		while ( XSPI_SCK_GetValue()!=0x00 )
;;;68     		{
;;;69     			if ( XSPI_NCS_GetValue()==0x00 )
;;;70     			{
;;;71     				return( ERR_XSPI_RX_TimeOut );
;;;72     			}
;;;73     		}  
;;;74     
;;;75     		//拉低BUSY
;;;76     		XSPI_BUSY_SetLow();
;;;77     	}
;;;78     
;;;79     	*pBuf = tmp;
;;;80     	return( CRR_PASS );
;;;81     }
000052  bcf0              POP      {r4-r7}
000054  2061              MOVS     r0,#0x61              ;46
000056  4770              BX       lr
                  |L1.88|
000058  686c              LDR      r4,[r5,#4]            ;42
00005a  0724              LSLS     r4,r4,#28             ;42
00005c  d5f6              BPL      |L1.76|
                  |L1.94|
00005e  0849              LSRS     r1,r1,#1              ;51
000060  686c              LDR      r4,[r5,#4]            ;52
000062  06e4              LSLS     r4,r4,#27             ;52
000064  d501              BPL      |L1.106|
000066  4339              ORRS     r1,r1,r7              ;54
000068  e001              B        |L1.110|
                  |L1.106|
00006a  0649              LSLS     r1,r1,#25             ;59
00006c  0e49              LSRS     r1,r1,#25             ;59
                  |L1.110|
00006e  68b4              LDR      r4,[r6,#8]            ;64
000070  431c              ORRS     r4,r4,r3              ;64
000072  60b4              STR      r4,[r6,#8]            ;64
000074  686c              LDR      r4,[r5,#4]            ;67
000076  0724              LSLS     r4,r4,#28             ;67
000078  d508              BPL      |L1.140|
                  |L1.122|
00007a  686c              LDR      r4,[r5,#4]            ;69
00007c  0764              LSLS     r4,r4,#29             ;69
00007e  d402              BMI      |L1.134|
000080  bcf0              POP      {r4-r7}
000082  2061              MOVS     r0,#0x61              ;71
000084  4770              BX       lr
                  |L1.134|
000086  686c              LDR      r4,[r5,#4]            ;67
000088  0724              LSLS     r4,r4,#28             ;67
00008a  d4f6              BMI      |L1.122|
                  |L1.140|
00008c  68b4              LDR      r4,[r6,#8]            ;76
00008e  439c              BICS     r4,r4,r3              ;76
000090  60b4              STR      r4,[r6,#8]            ;76
000092  1c52              ADDS     r2,r2,#1              ;39
000094  b2d2              UXTB     r2,r2                 ;39
000096  2a08              CMP      r2,#8                 ;39
000098  d3d5              BCC      |L1.70|
00009a  7001              STRB     r1,[r0,#0]            ;79
00009c  bcf0              POP      {r4-r7}
00009e  2000              MOVS     r0,#0                 ;80
0000a0  4770              BX       lr
;;;82     
                          ENDP

                  XSPI_RecvMsgFromHostMcu PROC
;;;84     //从HostMCU接收数据
;;;85     uint8_t XSPI_RecvMsgFromHostMcu( uint8_t *pRxBuf , uint8_t *pRxCnt )
0000a2  b5f8              PUSH     {r3-r7,lr}
;;;86     {
0000a4  4604              MOV      r4,r0
0000a6  460d              MOV      r5,r1
;;;87     	uint8_t	cnt , ErrFlag;
;;;88     
;;;89     
;;;90     	XSPI_BUSY_SetLow();
0000a8  4f58              LDR      r7,|L1.524|
0000aa  68b8              LDR      r0,[r7,#8]
0000ac  2140              MOVS     r1,#0x40
0000ae  4388              BICS     r0,r0,r1
0000b0  60b8              STR      r0,[r7,#8]
;;;91     	if ( XSPI_NCS_GetValue()==0x00 )
0000b2  4e55              LDR      r6,|L1.520|
0000b4  6870              LDR      r0,[r6,#4]
0000b6  0740              LSLS     r0,r0,#29
0000b8  d401              BMI      |L1.190|
;;;92     	{
;;;93     		return( ERR_Master_Idle );
0000ba  2051              MOVS     r0,#0x51
;;;94     	}
;;;95     
;;;96     	//接收数据长度
;;;97     	*pRxCnt = 0x00;
;;;98     	ErrFlag = XSPI_RecvOneByteFromHostMcu( &cnt );
;;;99     	if ( ErrFlag!=CRR_PASS )
;;;100    	{
;;;101    		return( ErrFlag );
;;;102    	}
;;;103    
;;;104    	//接收数据
;;;105    	*pRxCnt = cnt;
;;;106    	while ( cnt )
;;;107    	{
;;;108    		ErrFlag = XSPI_RecvOneByteFromHostMcu( pRxBuf );
;;;109    		if ( ErrFlag != CRR_PASS )
;;;110    		{
;;;111    			*pRxCnt = 0x00;
;;;112    			return( ErrFlag );
;;;113    		}
;;;114    		pRxBuf++;
;;;115    		cnt--;
;;;116    	}
;;;117    
;;;118    	//等待HostMCU通知执行任务 , 等待SCK变高
;;;119    	while ( XSPI_SCK_GetValue()==0x00 )
;;;120    	{
;;;121    		if ( XSPI_NCS_GetValue()==0x00 )
;;;122    		{
;;;123    			return( ERR_XSPI_RX_TimeOut );
;;;124    		}
;;;125    	}
;;;126    
;;;127    	//拉高BUSY，等SCK变低后，开始做任务
;;;128    	XSPI_BUSY_SetHigh();
;;;129    	while ( XSPI_SCK_GetValue()!=0x00 )
;;;130    	{
;;;131    		if ( XSPI_NCS_GetValue()==0x00 )
;;;132    		{
;;;133    			return( ERR_XSPI_RX_TimeOut );
;;;134    		}
;;;135    	}
;;;136    
;;;137    	return( ErrFlag );
;;;138    }
0000bc  bdf8              POP      {r3-r7,pc}
                  |L1.190|
0000be  2000              MOVS     r0,#0                 ;97
0000c0  7028              STRB     r0,[r5,#0]            ;97
0000c2  4668              MOV      r0,sp                 ;98
0000c4  f7fffffe          BL       XSPI_RecvOneByteFromHostMcu
0000c8  4601              MOV      r1,r0                 ;98
0000ca  0008              MOVS     r0,r1                 ;99
0000cc  d000              BEQ      |L1.208|
0000ce  bdf8              POP      {r3-r7,pc}
                  |L1.208|
0000d0  4668              MOV      r0,sp                 ;105
0000d2  7800              LDRB     r0,[r0,#0]            ;105
0000d4  7028              STRB     r0,[r5,#0]            ;105
0000d6  4668              MOV      r0,sp                 ;106
0000d8  7800              LDRB     r0,[r0,#0]            ;106
0000da  2800              CMP      r0,#0                 ;106
0000dc  d011              BEQ      |L1.258|
                  |L1.222|
0000de  4620              MOV      r0,r4                 ;108
0000e0  f7fffffe          BL       XSPI_RecvOneByteFromHostMcu
0000e4  4601              MOV      r1,r0                 ;108
0000e6  0008              MOVS     r0,r1                 ;109
0000e8  d003              BEQ      |L1.242|
0000ea  2000              MOVS     r0,#0                 ;111
0000ec  7028              STRB     r0,[r5,#0]            ;111
0000ee  4608              MOV      r0,r1                 ;112
0000f0  bdf8              POP      {r3-r7,pc}
                  |L1.242|
0000f2  1c64              ADDS     r4,r4,#1              ;114
0000f4  466a              MOV      r2,sp                 ;115
0000f6  7810              LDRB     r0,[r2,#0]            ;115
0000f8  1e40              SUBS     r0,r0,#1              ;115
0000fa  b2c0              UXTB     r0,r0                 ;115
0000fc  9000              STR      r0,[sp,#0]            ;115
0000fe  2800              CMP      r0,#0                 ;106
000100  d1ed              BNE      |L1.222|
                  |L1.258|
000102  6870              LDR      r0,[r6,#4]            ;119
000104  0700              LSLS     r0,r0,#28             ;119
000106  d407              BMI      |L1.280|
                  |L1.264|
000108  6870              LDR      r0,[r6,#4]            ;121
00010a  0740              LSLS     r0,r0,#29             ;121
00010c  d401              BMI      |L1.274|
00010e  2061              MOVS     r0,#0x61              ;123
000110  bdf8              POP      {r3-r7,pc}
                  |L1.274|
000112  6870              LDR      r0,[r6,#4]            ;119
000114  0700              LSLS     r0,r0,#28             ;119
000116  d5f7              BPL      |L1.264|
                  |L1.280|
000118  68b8              LDR      r0,[r7,#8]            ;128
00011a  2240              MOVS     r2,#0x40              ;128
00011c  4310              ORRS     r0,r0,r2              ;128
00011e  60b8              STR      r0,[r7,#8]            ;128
000120  6870              LDR      r0,[r6,#4]            ;129
000122  0700              LSLS     r0,r0,#28             ;129
000124  d507              BPL      |L1.310|
                  |L1.294|
000126  6870              LDR      r0,[r6,#4]            ;131
000128  0740              LSLS     r0,r0,#29             ;131
00012a  d401              BMI      |L1.304|
00012c  2061              MOVS     r0,#0x61              ;133
00012e  bdf8              POP      {r3-r7,pc}
                  |L1.304|
000130  6870              LDR      r0,[r6,#4]            ;129
000132  0700              LSLS     r0,r0,#28             ;129
000134  d4f7              BMI      |L1.294|
                  |L1.310|
000136  4608              MOV      r0,r1                 ;137
000138  bdf8              POP      {r3-r7,pc}
;;;139    
                          ENDP

                  XSPI_SendOneByteToHostMcu PROC
;;;141    //向HostMcu发送8bit数据
;;;142    uint8_t  XSPI_SendOneByteToHostMcu( uint8_t va )
00013a  b470              PUSH     {r4-r6}
;;;143    {
;;;144    	uint8_t i ;
;;;145    
;;;146    	for ( i=0; i<8; i++ )
00013c  2200              MOVS     r2,#0
;;;147    	{
;;;148    		//等待SCK变高
;;;149    		while (XSPI_SCK_GetValue()==0x00)
;;;150    		{
;;;151    			if ( XSPI_NCS_GetValue() == 0x00 )
;;;152    			{
;;;153    				return( ERR_XSPI_TX_TimeOut );
;;;154    			}
;;;155    		}
;;;156    
;;;157    		//输出数据
;;;158    		if ( va & 0x01 )
;;;159    		{
;;;160    			XSPI_MISO_SetHigh();
00013e  2620              MOVS     r6,#0x20
000140  4b31              LDR      r3,|L1.520|
000142  4c32              LDR      r4,|L1.524|
;;;161    		}
;;;162    		else
;;;163    		{
;;;164    			XSPI_MISO_SetLow();
;;;165    		}
;;;166    		va >>= 1;
;;;167    
;;;168    		//拉高BUSY
;;;169    		XSPI_BUSY_SetHigh();
000144  2540              MOVS     r5,#0x40
                  |L1.326|
000146  6859              LDR      r1,[r3,#4]            ;149
000148  0709              LSLS     r1,r1,#28             ;149
00014a  d408              BMI      |L1.350|
                  |L1.332|
00014c  6859              LDR      r1,[r3,#4]            ;151
00014e  0749              LSLS     r1,r1,#29             ;151
000150  d402              BMI      |L1.344|
;;;170    		//等待SCK变低
;;;171    		while (XSPI_SCK_GetValue() != 0x00)
;;;172    		{
;;;173    			if ( XSPI_NCS_GetValue() == 0x00 )
;;;174    			{
;;;175    				return( ERR_XSPI_TX_TimeOut );
;;;176    			}
;;;177    		}
;;;178    
;;;179    		//拉低BUSY
;;;180    		XSPI_BUSY_SetLow();
;;;181    
;;;182    	}
;;;183    
;;;184    	return( CRR_PASS );
;;;185    }
000152  bc70              POP      {r4-r6}
000154  2060              MOVS     r0,#0x60              ;153
000156  4770              BX       lr
                  |L1.344|
000158  6859              LDR      r1,[r3,#4]            ;149
00015a  0709              LSLS     r1,r1,#28             ;149
00015c  d5f6              BPL      |L1.332|
                  |L1.350|
00015e  07c1              LSLS     r1,r0,#31             ;158
000160  d003              BEQ      |L1.362|
000162  68a1              LDR      r1,[r4,#8]            ;160
000164  4331              ORRS     r1,r1,r6              ;160
000166  60a1              STR      r1,[r4,#8]            ;160
000168  e002              B        |L1.368|
                  |L1.362|
00016a  68a1              LDR      r1,[r4,#8]            ;164
00016c  43b1              BICS     r1,r1,r6              ;164
00016e  60a1              STR      r1,[r4,#8]            ;164
                  |L1.368|
000170  0840              LSRS     r0,r0,#1              ;166
000172  68a1              LDR      r1,[r4,#8]            ;169
000174  4329              ORRS     r1,r1,r5              ;169
000176  60a1              STR      r1,[r4,#8]            ;169
000178  6859              LDR      r1,[r3,#4]            ;171
00017a  0709              LSLS     r1,r1,#28             ;171
00017c  d508              BPL      |L1.400|
                  |L1.382|
00017e  6859              LDR      r1,[r3,#4]            ;173
000180  0749              LSLS     r1,r1,#29             ;173
000182  d402              BMI      |L1.394|
000184  bc70              POP      {r4-r6}
000186  2060              MOVS     r0,#0x60              ;175
000188  4770              BX       lr
                  |L1.394|
00018a  6859              LDR      r1,[r3,#4]            ;171
00018c  0709              LSLS     r1,r1,#28             ;171
00018e  d4f6              BMI      |L1.382|
                  |L1.400|
000190  68a1              LDR      r1,[r4,#8]            ;180
000192  43a9              BICS     r1,r1,r5              ;180
000194  60a1              STR      r1,[r4,#8]            ;180
000196  1c52              ADDS     r2,r2,#1              ;146
000198  b2d2              UXTB     r2,r2                 ;146
00019a  2a08              CMP      r2,#8                 ;146
00019c  d3d3              BCC      |L1.326|
00019e  bc70              POP      {r4-r6}
0001a0  2000              MOVS     r0,#0                 ;184
0001a2  4770              BX       lr
;;;186    
                          ENDP

                  XSPI_SendMsgToMasterMcu PROC
;;;189    //向HostMcu发送msg
;;;190    uint8_t XSPI_SendMsgToMasterMcu( uint8_t *pTxBuf , uint8_t TxCnt  , uint8_t Status)
0001a4  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;191    {
0001a6  4605              MOV      r5,r0
0001a8  460c              MOV      r4,r1
;;;192    	uint8_t ErrFlag;
;;;193    
;;;194    	//做完任务， 拉低BUSY
;;;195    	XSPI_BUSY_SetLow();
0001aa  4f18              LDR      r7,|L1.524|
0001ac  68b9              LDR      r1,[r7,#8]
0001ae  2040              MOVS     r0,#0x40
0001b0  4381              BICS     r1,r1,r0
0001b2  60b9              STR      r1,[r7,#8]
;;;196    	
;;;197    
;;;198    	//发送数据长度及数据体
;;;199    	ErrFlag = XSPI_SendOneByteToHostMcu( TxCnt + 2 );
0001b4  1ca0              ADDS     r0,r4,#2
0001b6  b2c0              UXTB     r0,r0
0001b8  f7fffffe          BL       XSPI_SendOneByteToHostMcu
0001bc  4606              MOV      r6,r0
;;;200    	if ( ErrFlag==CRR_PASS )
0001be  0030              MOVS     r0,r6
0001c0  d10c              BNE      |L1.476|
;;;201    	{
;;;202    		while ( TxCnt )
0001c2  2c00              CMP      r4,#0
0001c4  d00a              BEQ      |L1.476|
                  |L1.454|
;;;203    		{
;;;204    			ErrFlag = XSPI_SendOneByteToHostMcu( *pTxBuf );
0001c6  7828              LDRB     r0,[r5,#0]
0001c8  f7fffffe          BL       XSPI_SendOneByteToHostMcu
0001cc  4606              MOV      r6,r0
;;;205    			if ( ErrFlag!=CRR_PASS )
0001ce  2e00              CMP      r6,#0
0001d0  d104              BNE      |L1.476|
;;;206    			{
;;;207    				break;
;;;208    			}
;;;209    
;;;210    			pTxBuf++;
0001d2  1c6d              ADDS     r5,r5,#1
;;;211    			TxCnt--;
0001d4  1e64              SUBS     r4,r4,#1
0001d6  b2e4              UXTB     r4,r4
0001d8  2c00              CMP      r4,#0                 ;202
0001da  d1f4              BNE      |L1.454|
                  |L1.476|
;;;212    		}
;;;213    	}
;;;214    
;;;215    	if ( ErrFlag==CRR_PASS )
0001dc  2e00              CMP      r6,#0
0001de  d102              BNE      |L1.486|
;;;216    	{
;;;217    		XSPI_SendOneByteToHostMcu( 0x90 );
0001e0  2090              MOVS     r0,#0x90
0001e2  f7fffffe          BL       XSPI_SendOneByteToHostMcu
                  |L1.486|
;;;218    	}
;;;219    	if ( ErrFlag==CRR_PASS )
0001e6  2e00              CMP      r6,#0
0001e8  d102              BNE      |L1.496|
;;;220    	{
;;;221    		XSPI_SendOneByteToHostMcu( Status );
0001ea  9802              LDR      r0,[sp,#8]
0001ec  f7fffffe          BL       XSPI_SendOneByteToHostMcu
                  |L1.496|
;;;222    	}
;;;223    
;;;224    
;;;225    	//拉低BUSY , MISO
;;;226    	XSPI_BUSY_SetLow();
0001f0  68b9              LDR      r1,[r7,#8]
0001f2  2040              MOVS     r0,#0x40
0001f4  4381              BICS     r1,r1,r0
0001f6  60b9              STR      r1,[r7,#8]
;;;227    	XSPI_MISO_SetLow();
0001f8  68b8              LDR      r0,[r7,#8]
0001fa  2120              MOVS     r1,#0x20
0001fc  4388              BICS     r0,r0,r1
0001fe  60b8              STR      r0,[r7,#8]
;;;228    
;;;229    	return( ErrFlag );
000200  4630              MOV      r0,r6
;;;230    
;;;231    }
000202  b003              ADD      sp,sp,#0xc
000204  bdf0              POP      {r4-r7,pc}
;;;232    
                          ENDP

000206  0000              DCW      0x0000
                  |L1.520|
                          DCD      0x40020dc0
                  |L1.524|
                          DCD      0x40020d80

;*** Start embedded assembler ***

#line 1 "..\\Src\\SlaveMcu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_SlaveMcu_c_02e97dba____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_SlaveMcu_c_02e97dba____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_SlaveMcu_c_02e97dba____REVSH|
#line 462
|__asm___10_SlaveMcu_c_02e97dba____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
